//注意，由于使用滚动数组，所以k要逆序操作更新
class Solution {
public:
    int maxProfit(int k, vector<int> &prices) {
        int len = prices.size();
        if(len == 0) return 0;
        
        if(k >= len - 1) {
            return solveMaxProfit(prices);
        }
        
        vector<int> dpGlobal(k+1, 0);
        vector<int> dpLocal(k+1, 0);
        
        for(int i = 0; i < len - 1; i++) {
            int diff = prices[i+1] - prices[i];
            for(int j = k; j >= 1; j--) {
                dpLocal[j] = max(dpLocal[j] + diff, dpGlobal[j-1] + max(diff, 0));
                dpGlobal[j] = max(dpLocal[j], dpGlobal[j]);
            }
        }

        return dpGlobal[k];
    }
    
    int solveMaxProfit(vector<int> &prices) {
        int res = 0;
        for(int i = 1; i < prices.size(); i++) {
            int diff = prices[i] - prices[i-1];
            if(diff > 0)
                res += diff;
        }
        return res;
    }
};