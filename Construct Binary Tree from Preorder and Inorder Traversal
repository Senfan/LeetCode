/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode *recursePro(vector<int> &preorder, vector<int> &inorder, int pS, int pE, int iS, int iE) {
        if(pS > pE || iS > iE) return NULL;
        TreeNode *root = new TreeNode(preorder[pS]);
        if(pS == pE) return root;
        
        int leftCnt = 0;
        for(int i = iS; i <= iE; i++) {
            if(inorder[i] != preorder[pS]) leftCnt++;
            else break;
        }
        root -> left = recursePro(preorder, inorder, pS+1, pE, iS, iS+leftCnt - 1);
        root -> right = recursePro(preorder, inorder, pS + leftCnt + 1, pE, iS + leftCnt + 1, iE);
        
    }
    
    TreeNode *buildTree(vector<int> &preorder, vector<int> &inorder) {
        if(preorder.empty()) return NULL;
        
        return recursePro(preorder, inorder, 0, preorder.size()-1, 0, inorder.size()-1);
    }
};

//60ms
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        if(preorder.empty()) return NULL;
        TreeNode *root = recurseBuild(preorder, 0, preorder.size()-1, inorder, 0, inorder.size() - 1);
        return root;
    }
    
    TreeNode *recurseBuild(vector<int> &preorder, int pleft, int pright, vector<int> &inorder, int ileft, int iright) {
        TreeNode *root = new TreeNode(preorder[pleft]);
        int cnt = 0;
        for(int i = ileft; i <= iright; i++) {
            if(inorder[i] == preorder[pleft]) break;
            cnt++;
        }
        if(cnt)
            root -> left = recurseBuild(preorder, pleft+1, pleft+1+cnt, inorder, ileft, ileft+cnt-1);
        if(ileft + cnt < iright)
            root -> right = recurseBuild(preorder, pleft+cnt+1, pright, inorder, ileft+cnt+1, iright);
        return root;
    }
};

//S: 52ms
class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        return helper(preorder, 0, preorder.size() - 1, inorder, 0, inorder.size()-1);
    }
    
    TreeNode* helper(vector<int>& pV, int pl, int pr, vector<int> &iV, int il, int ir) {
        if(pl <= pr) {
            TreeNode *root = new TreeNode(pV[pl]);
            int i;
            for(i = il; i <= ir; i++) {
                if(pV[pl] == iV[i]) break;
            }
            
            root -> left = helper(pV, pl+1, pl+i-il, iV, il, i-1);
            root -> right = helper(pV, pl+i-il+1, pr, iV, i+1, ir);
            
            return root;
        }else {
            return NULL;
        }
    }
};