// 6ms
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    
    vector<vector<int> > zigzagLevelOrder(TreeNode *root) {
        vector<vector<int>> res;
        if(root == NULL) return res;
        
        stack<TreeNode*> leftStk, rightStk;
        leftStk.push(root);
        TreeNode *tnode;
        
        while(!leftStk.empty() || !rightStk.empty()) {
            vector<int> tmp;
            while(!leftStk.empty()) {
                tnode = leftStk.top();
                leftStk.pop();
                tmp.push_back(tnode -> val);
                if(tnode -> left) rightStk.push(tnode -> left);
                if(tnode -> right) rightStk.push(tnode -> right);
            }
            if(!tmp.empty()) res.push_back(tmp);
            tmp.clear();
            while(!rightStk.empty()) {
                tnode = rightStk.top();
                rightStk.pop();
                tmp.push_back(tnode -> val);
                if(tnode -> right) leftStk.push(tnode -> right);
                if(tnode -> left) leftStk.push(tnode -> left);
            }
            if(!tmp.empty()) res.push_back(tmp);
        }
        return res;
    }
};

//S 4ms
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>> res;
        if(!root) return res;
        
        vector<int> level;
        TreeNode *curNode = NULL;
        queue<TreeNode *> que;
        que.push(root); que.push(NULL);
        int odd = 1;
        while(que.size() > 1) {
            curNode = que.front();
            que.pop();
            if(curNode == NULL) {
                if(odd) res.push_back(level);
                else {reverse(level.begin(), level.end()); res.push_back(level);}
                level.clear();
                odd = !odd;
                que.push(NULL);
            }else {
                level.push_back(curNode -> val);
                if(curNode -> left) que.push(curNode -> left);
                if(curNode -> right) que.push(curNode -> right);
            }
        }
        if(odd) res.push_back(level);
        else {reverse(level.begin(), level.end()); res.push_back(level);}
        return res;
    }
};

//S: 4ms
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        queue<TreeNode*> que;
        vector<vector<int>> res;
        if(root == NULL) return res;
        que.push(root);
        que.push(NULL);
        int cnt = 0;
        vector<int> subRes;
        TreeNode *curNode = NULL;
        while(que.size() > 1) {
            curNode = que.front();
            que.pop();
            if(curNode == NULL) {
                if(cnt & 1) reverse(subRes.begin(), subRes.end());
                res.push_back(subRes);
                subRes.clear();
                cnt++;
                que.push(NULL);
                continue;
            }
            
            subRes.push_back(curNode -> val);
            if(curNode -> left) que.push(curNode -> left);
            if(curNode -> right) que.push(curNode -> right);
        }
        if(!subRes.empty()) {
            if(cnt & 1) reverse(subRes.begin(), subRes.end());
            res.push_back(subRes);
        }
        return res;
    }
};