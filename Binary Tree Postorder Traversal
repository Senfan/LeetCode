3ms

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    
private:

    enum Tag {L, R};
    struct stackNode {
        TreeNode *ptr;
        Tag tag;
        
        stackNode(TreeNode *N = NULL) : ptr(N), tag(L) {}
    };
    
public:
    vector<int> postorderTraversal(TreeNode *root) {
        stack<stackNode> stk;
        stackNode w;
        TreeNode *p = root;
        vector<int> res;
        
        do {
            while(p != NULL) {
                w.ptr = p;
                w.tag = L;
                stk.push(w);
                p = p -> left;
            }
            bool continue1 = true;
            while(continue1 && !stk.empty()) {
                w = stk.top();
                p = w.ptr;
                stk.pop();
                switch(w.tag) {
                    case L: w.tag = R;
                            continue1 = false;
                            stk.push(w);
                            p = p -> right;
                            break;
                    case R: res.push_back(p -> val);
                            break;
                }
            }
        }while(!stk.empty());
        
        return res;
    }
};

//4ms
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> res;
        if(!root) return res;
        stack<pair<TreeNode*, bool>> stk;
        TreeNode *curNode = root;
        pair<TreeNode*, bool> tmpPair;
        do {
            while(curNode != NULL) {
                stk.push({curNode, false});
                curNode = curNode -> left;
            }
            
            while(!stk.empty()) {
                tmpPair = stk.top();
                if(tmpPair.second) {
                    res.push_back(tmpPair.first -> val);
                    stk.pop();
                }else {
                    stk.top().second = true;
                    curNode = tmpPair.first -> right;
                    break;
                }
            }
        }while(!stk.empty());
        return res;
    }
};

//S :4ms
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        TreeNode *curNode = root;
        stack<TreeNode*> stk;
        vector<int> res;
        while(curNode || !stk.empty()) {
            while(curNode) {
                if(map.count(curNode)) {
                    if(map[curNode] == 0) {
                        map[curNode] = 1;
                        curNode = curNode -> right;
                    }else {
                        curNode = NULL;
                    }
                }else {
                    stk.push(curNode);
                    map[curNode] = 0;
                    curNode = curNode -> left;
                }
            }
            
            if(!stk.empty()) {
                if(map[stk.top()] == 0) {
                    curNode = stk.top();
                    map[curNode] = 1;
                    curNode = curNode -> right;
                }else {
                    res.push_back(stk.top() -> val);
                    stk.pop();
                    if(!stk.empty()) curNode = stk.top();
                }
            }
        }
        return res;
    }
private:
    unordered_map<TreeNode*, int> map;
};


//R 可以从另一个角度看问题：访问顺序上！！！可以变通啊！！！

class Solution {
public:
    vector<int> postorderTraversal(TreeNode *root) {
        stack<TreeNode*> nodeStack;
        vector<int> result;
        //base case
        if(root==NULL)
        return result;
        nodeStack.push(root);
    while(!nodeStack.empty())
    {
        TreeNode* node= nodeStack.top();  
        result.push_back(node->val);
        nodeStack.pop();
        if(node->left)
        nodeStack.push(node->left);
        if(node->right)
        nodeStack.push(node->right);
    }
     reverse(result.begin(),result.end());
     return result;

}