class Solution {
public:
    
    bool binarySearch(int A[], int left, int right, int target) {
        int mid;
        
        while(left <= right) {
            mid = (left + right) >> 1;
            if(A[mid] == target) return true;
            if(A[mid] > target) right = mid - 1;
            else left = mid + 1;
        }
        
        return false;
    }
    
    bool search(int A[], int n, int target) {
        int left = 0;
        int right = n - 1;
        int mid;
        
        if(n == 1 && A[0] == target) return true;
        
        if(A[left] < A[right]) {
            return binarySearch(A, left, right, target);
        }
        
        while(A[right] == A[left] && right != left) right--;
        
        while(left <= right) {
            if(A[left] == target) return true;
            if(A[left] > target) { //后半段
                mid = (left + right) >> 1;
                if(A[mid] == target) return true;
                if(A[mid] > target) {
                    if(A[mid] >= A[left]) left = mid + 1;
                    else right = mid - 1;
                }else {
                    return binarySearch(A, mid + 1, right, target);
                }
            }else {// 前半段
                mid = (left + right) >> 1;
                if(A[mid] == target) return true;
                if(A[mid] > target) {
                    return binarySearch(A, left, mid-1, target);
                }else {
                    if(A[mid] >= A[left]) left = mid + 1;
                    else right = mid - 1;
                }
            }
        }
        return false;
    }
};


// R : 8ms 经典算法，同I :先判断在哪一部分 O(n)
class Solution {
public:
    bool search(vector<int>& nums, int target) {
        if(nums.empty()) return false;
        
        int r = nums.size() - 1, l = 0, mid;
        
        while(l <= r) {
            mid = l + ((r - l) >> 1);
            if(nums[mid] == target) return true;
            if(nums[l] < nums[mid]) {// left side
                if(target < nums[mid] && nums[l] <= target) r = mid - 1;
                else l = mid + 1;
            }else if(nums[l] > nums[mid]){// right side
                if(target > nums[mid] && target <= nums[r]) l = mid + 1;
                else r = mid - 1;
            }else l++;
        }
        return false;
    }
};

//S : 8ms O(n) 但是上述代码更简洁！！！因为问题的关键可以回归到nums[l] 与 nums[mid] 大小比较的时候
class Solution {
public:
    bool search(vector<int>& nums, int target) {
        int len = nums.size();
        if(len == 0) return false;
        int div = len;
        for(int i = 1; i < len; i++) {
            if(nums[i] < nums[i-1]) {
                div = i;
                break;
            }
        }
        
        if(div == len) {
            return binSearch(nums, 0, len-1, target);
        }else {
            return binSearch(nums, 0, div-1, target) || binSearch(nums, div, len-1, target);
        }
        
    }
    
    bool binSearch(vector<int> &nums, int l, int r, int t) {
        int mid;
        while(l <= r) {
            mid = (l + r) >> 1;
            if(nums[mid] == t) return true;
            else if(nums[mid] > t) {
                r = mid - 1;
            }else {
                l = mid + 1;
            }
        }
        return false;
    }
};