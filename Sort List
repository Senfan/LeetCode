//O(nlgn) 78ms

class Solution {
public:

    ListNode *getMiddle(ListNode *low) {

        ListNode *mid = low;
        ListNode *cur = low;

        while(cur) {
            if(cur -> next) {
                if(cur -> next -> next) {
                    mid = mid -> next;
                    cur = cur -> next -> next;
                }
            }
            cur = cur -> next;
        }
        return mid;
    }

    ListNode *mergeSort(ListNode *left) {
        if(left == NULL || left -> next == NULL) return left;
        ListNode *mid = getMiddle(left);
        ListNode *tmpPointer = mid -> next;

        mid -> next = NULL;
        left = mergeSort(left);
        tmpPointer = mergeSort(tmpPointer);

        //搞个头结点，插入删除统一、方便！！！
        ListNode *iniNode = new ListNode(-1);
        ListNode *pre = iniNode;
        while(left && tmpPointer) {
            if(left -> val >= tmpPointer -> val) {
                pre -> next = tmpPointer;
                tmpPointer = tmpPointer-> next;
            }else {
                pre -> next = left;
                left = left -> next;
            }
            pre = pre -> next;
        }
        if(left != NULL)
            pre -> next = left;
        if(tmpPointer != NULL)
            pre -> next = tmpPointer;
        left = iniNode -> next;
        delete iniNode;
        return left;
    }

    ListNode *sortList(ListNode *head) {
        head = mergeSort(head);
        //cout << head -> val;
        return head;
    }
};

//R 64ms链表的归并排序
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getMid(ListNode *low) {
        ListNode *mid = low, *curNode = low;
        
        while(curNode) {
            if(curNode -> next) {
                if(curNode -> next -> next) {
                    mid = mid -> next;
                    curNode = curNode -> next -> next;
                }
            }
            curNode = curNode -> next;
        }
        return mid;
    }
    
    ListNode *mergeSort(ListNode *left) {
        if(left == NULL || left -> next == NULL) return left;
        
        ListNode *mid = getMid(left);
        ListNode *tmpNode = mid -> next;
        mid -> next = NULL;
        left = mergeSort(left);
        tmpNode = mergeSort(tmpNode);
        
        ListNode *iniNode = new ListNode(-1);
        ListNode *pre = iniNode;
        
        while(left && tmpNode) {
            if(left -> val >= tmpNode -> val) {
                pre -> next = tmpNode;
                tmpNode = tmpNode -> next;
            }else {
                pre -> next = left;
                left = left -> next;
            }
            pre = pre -> next;
        }
        
        if(left) pre -> next = left;
        if(tmpNode) pre -> next = tmpNode;
        left = iniNode -> next;
        delete iniNode;
        return left;
    }
    ListNode* sortList(ListNode* head) {
        head = mergeSort(head);
        return head;
    }
};


//60ms
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        if(head == NULL || head -> next == NULL) return head;
        ListNode *pre = head, *cur = head, *tmp;
        while(cur && cur -> next) {
            cur = cur -> next -> next;
            tmp = pre;
            pre = pre -> next;
        }
        tmp -> next = NULL;
        return merge(sortList(head), sortList(pre));
    }
    
    ListNode* merge(ListNode *l1, ListNode *l2) {
        ListNode *iniNode = new ListNode(0), *curEnd = iniNode;
        while(l1 && l2) {
            if(l1 -> val < l2 -> val) {curEnd -> next = l1; curEnd = l1; l1 = l1 -> next;}
            else {curEnd -> next = l2; curEnd = l2; l2 = l2 -> next;}
        }
        if(l1) { curEnd -> next = l1;}
        if(l2) { curEnd -> next = l2;}
        
        l1 = iniNode -> next;
        delete iniNode;
        return l1;
    }
};