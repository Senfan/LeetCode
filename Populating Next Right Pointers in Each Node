//还有变种II,其实考察的就是不用队列的广度优先遍历！！但是模型依旧是一层一层的处理，只不过要依靠上一层的节点
/**
 * Definition for binary tree with next pointer.
 * struct TreeLinkNode {
 *  int val;
 *  TreeLinkNode *left, *right, *next;
 *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}
 * };
 */
 // 24ms
class Solution {
public:

    void connect(TreeLinkNode *root) {
        if(root == NULL || root -> left == NULL) return;
        
        TreeLinkNode *curNode = root;
        TreeLinkNode *curLevel = root;
        while(curLevel -> left) { // each level
            
            curNode = curLevel;
            while(curNode) {
                curNode -> left -> next = curNode -> right;
                if(curNode -> next) {
                    curNode -> right -> next = curNode -> next -> left; 
                }
                curNode = curNode -> next;
            }
            curLevel = curLevel -> left;
        }
    }
};

// 28ms
/**
 * Definition for binary tree with next pointer.
 * struct TreeLinkNode {
 *  int val;
 *  TreeLinkNode *left, *right, *next;
 *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}
 * };
 */
class Solution {
public:
    void connect(TreeLinkNode *root) {
        if(root == NULL) return;
        queue<TreeLinkNode*> que;
        que.push(root);
        que.push(NULL);
        TreeLinkNode *curNode;
        while(que.size() > 1) {
            curNode = que.front();
            que.pop();
            if(curNode == NULL) {
                que.push(NULL);
                continue;
            }
            
            curNode -> next = que.front();
            if(curNode -> left) {que.push(curNode -> left); que.push(curNode -> right);}
        }
    }
};