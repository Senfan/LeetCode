//153ms很慢
class Solution {
public:

    bool isScramble(string s1, string s2) {
        if(s1 == s2) return true;
        int len = s1.size();
        
        bool dp[100][100][101];
        
        for(int i = 0; i < len; i++){
            for(int j = 0; j < len; j++) {
                dp[i][j][1] = (s1[i] == s2[j]);
            }
        }
        
        for(int k = 2; k <= len; k++){
            for(int j = 0; j < len; j++) { //遍历每一种情况
                for(int i = 0; i < len; i++) {
                    bool rm = false;
                    for(int m = 1; m < k && !rm; m++) {
                        rm = dp[j][i][m] && dp[j+m][i+m][k-m] || dp[j][i+k-m][m] && dp[j+m][i][k-m];
                    }
                    dp[j][i][k] = rm;
                }
            }
        }
        
        return dp[0][0][len];
    }
};

//递归解法：4ms——很明显，可以划分成子问题，从而利用递归解决，就两条分支
class Solution {
public:
    bool isScramble(string s1, string s2) {
        if(s1==s2)
            return true;

        int len = s1.length();
        int count[26] = {0};
        for(int i=0; i<len; i++)
        {
            count[s1[i]-'a']++;
            count[s2[i]-'a']--;
        }

        for(int i=0; i<26; i++)
        {
            if(count[i]!=0)
                return false;
        }

        for(int i=1; i<=len-1; i++)
        {
            if( isScramble(s1.substr(0,i), s2.substr(0,i)) && isScramble(s1.substr(i), s2.substr(i)))
                return true;
            if( isScramble(s1.substr(0,i), s2.substr(len-i)) && isScramble(s1.substr(i), s2.substr(0,len-i)))
                return true;
        }
        return false;
    }
};