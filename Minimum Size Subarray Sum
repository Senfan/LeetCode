class Solution {
public:
    int minSubArrayLen(int s, vector<int>& nums) {
        int len = nums.size(), res = INT_MAX, start = 0, enda = 0, sum = 0;
        if(len == 0) return 0;

        while(enda < len) {
        	bool isEnd = false;
            while(sum < s && enda < len) {
                sum += nums[enda];
                enda++;
            }
            if(sum < s && start == 0) return 0;
            while(sum >= s && start <= enda) {
            	isEnd = true;
                sum -= nums[start];
                start++;
            }
            if(enda - start + 1)
            	res = res > enda - start + 1 ? enda - start + 1 : res;
        }
        return res;
    }
};

//S 4ms
class Solution {
public:
    int minSubArrayLen(int sum, vector<int>& nums) {
        if(nums.empty()) return 0;
        int nLen = nums.size();

        int left = 0, right = 0;
        int res = INT_MAX, curSum = 0;
        while(right < nLen || curSum > sum) {
            while(right < nLen && curSum < sum) curSum += nums[right++];
            while(curSum >= sum && left <= right) curSum -= nums[left++];
            if(right == nLen && left == 0) return 0;
            if(res > right - left + 1) res = right - left + 1;
        }
        return res;
    }
};