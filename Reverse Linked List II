O(n) 4ms
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *reverseBetween(ListNode *head, int m, int n) {
        int cnt = 0; 
        ListNode *pre, *temp, *cur = head, *pm, *ml; // ml: the pointer to the m element.
        
        if(m == n) return head;
        
        if(m == 1) {
            cnt++;
            ml = head;
            pm = head;
            pre = head;
            cur = pre -> next;
            //temp = cur -> next;
        }else {
            while(cur && cnt < m-1) {
                cnt++;
                pre = cur;
                cur = cur->next;
            }
            ml = cur;// record the pointer to the m element.
            pm = pre;
        }
        
        
        while(cur && cnt < n) {
            cnt++;
            temp = cur -> next;
            cur->next = pre;
            pre = cur;
            cur = temp;
        }
        
        pm->next = pre;
        ml->next = cur;
        if(m == 1) return pre;
        return head;
    }
};

// S 4ms
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int m, int n) {
        if(head == NULL || m == n) return head;
        
        ListNode *iniNode = new ListNode(0);
        iniNode -> next = head;
        
        ListNode *curNode = head, *preNode = iniNode;
        int cnt = 1;
        while(cnt < m) {
            curNode = curNode -> next;
            preNode = preNode -> next;
            cnt++;
        }
        
        ListNode *next1 = curNode -> next, *next2;
        while(cnt < n) {
            next2 = next1 -> next;
            next1 -> next = curNode;
            curNode = next1;
            next1 = next2;
            cnt++;
        }
        next2 = preNode -> next;
        preNode -> next -> next = NULL;
        preNode -> next = curNode;
        next2 -> next = next1;
        return iniNode -> next;
    }
};

// S 4ms
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int m, int n) {
        if(n == m || head == NULL || head -> next == NULL) return head;
        
        ListNode *iniNode = new ListNode(0);
        iniNode -> next = head;
        
        ListNode *preNode = iniNode, *tailNode = NULL;
        int i;
        for(i = 1; i < m; i++) {
            preNode = preNode -> next;
        }
        ListNode *curNode = preNode -> next;
        ListNode *nextNode = curNode -> next;
        ListNode *tmpNode = NULL;
        for(; i < n; i++) {
            tmpNode = nextNode -> next;
            nextNode -> next = curNode;
            curNode = nextNode;
            nextNode = tmpNode;
        }
        preNode -> next -> next = nextNode;
        preNode -> next = curNode;
        
        return iniNode -> next;
    }
};