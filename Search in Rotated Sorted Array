class Solution {
public:
    
    int binarySearch(int A[], int left, int right, int target) {
        int mid;
        
        while(left <= right) {
            mid = (left + right) >> 1;
            if(A[mid] == target) return mid;
            if(A[mid] > target) right = mid - 1;
            else left = mid + 1;
        }
        
        return -1;
    }
    
    int search(int A[], int n, int target) {
        int left = 0;
        int right = n - 1;
        int mid;
        
        if(A[left] <= A[right]) {
            if(A[left] == target) return left;
            
            return binarySearch(A, left, right, target);
        }
        
        while(left <= right) {
            if(A[left] == target) return left;
            if(A[left] > target) { //后半段
                mid = (left + right) >> 1;
                if(A[mid] == target) return mid;
                if(A[mid] > target) {
                    if(A[mid] >= A[left]) left = mid + 1;
                    else right = mid - 1;
                }else {
                    return binarySearch(A, mid + 1, right, target);
                }
            }else {// 前半段
                mid = (left + right) >> 1;
                if(A[mid] == target) return mid;
                if(A[mid] > target) {
                    return binarySearch(A, left, mid-1, target);
                }else {
                    if(A[mid] >= A[left]) left = mid + 1;
                    else right = mid - 1;
                }
            }
        }
        return -1;
    }
};

//S 8ms 先找最小值，然后两边二分查找
class Solution {
public:
    int search(vector<int>& nums, int target) {
        if(nums.empty()) return -1;
        
        int size = nums.size(), l = 0, r = size - 1, m, pivot;
        
        while(l < r) {
            m = l + ((r - l) >> 1);
            if(nums[m] > nums[r]) l = m + 1;
            else r = m;
        }
        
        int r1 = bSearch(0, l-1, target, nums);
        int r2 = bSearch(l, size-1, target, nums);
        if(r1 != -1) return r1;
        else if(r2 != -1) return r2;
        else return -1;
    }
    
    int bSearch(int l, int r, int target, vector<int> &nums) {
        if(r < l) return -1;
        while(l <= r) {
            int m = l + ((r - l) >> 1);
            if(nums[m] == target) return m;
            if(target > nums[m]) l = m + 1;
            else r = m - 1;
        }
        return -1;
    }
};

//R 4ms 经典，先去判断是在哪一个区间当中，这可以用A[mid] 与 A[l] 或 A[r] 比较进行判断
class Solution {
public:
    int search(vector<int>& nums, int key) {
        if(nums.empty()) return -1;
        
        int r = nums.size() - 1, l = 0, mid;
        
        while(l <= r) {
            mid = l + ((r - l) >> 1);
            if(nums[mid] == key) return mid;
            if(nums[l] > nums[mid]) {
                if(key > nums[mid] && key < nums[l]) l = mid + 1;
                else r = mid - 1;
            }else {
                if(key >= nums[l] && key < nums[mid]) r = mid - 1;
                else l = mid + 1;
            }
        }
        return -1;
    }
};