/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:

    void inOrder(TreeNode *root, vector<int> &res) {
        if(root == NULL) return;
        
        inOrder(root -> left, res);
        res.push_back(root -> val);
        inOrder(root -> right, res);
    }
    
    bool isValidBST(TreeNode *root) {
        if(root == NULL) return true;
        vector<int> res;
        inOrder(root, res);
        int vecSize = res.size();
        if(vecSize == 1) return true;
        
        for(int i = 1; i < vecSize; i++) {
            if(res[i] <= res[i-1]) return false;
        }
        return true;
    }
};
//S 迭代算法，优化空间：16ms 
//int64_t类型 ： INT64_MIN
class Solution {
public:
    bool isValidBST(TreeNode* root) {
        if(root == NULL) return true;
        stack<TreeNode*> stk;
        TreeNode *curNode = root;
        int64_t pre = -2147483649;
        do {
            while(curNode) {
                stk.push(curNode);
                curNode = curNode -> left;
            }
            if(!stk.empty()) {
                curNode = stk.top();
                stk.pop();
                if(curNode -> val <= pre) return false;
                else {
                    pre = curNode -> val;
                }
                curNode = curNode -> right;
            }
        }while(curNode || !stk.empty());
        return true;
    }
};