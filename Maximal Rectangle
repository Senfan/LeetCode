//在位置记录上使用最优子结构，形成DP,TLE(其实很古怪， 可能不是TLE， Pass的DP看方案二)//其实与方案二的差别是，当前处理行的left/right数组可以利用上一行的结果，而本方案中的DP转移仅限于每一行中的left/right转换，粒度没有方案三中的大！！
class Solution {
public:
    int maximalRectangle(vector<vector<char>>& matrix) {
        int lineNum = matrix.size();
        if(lineNum == 0) return 0;
        int colNum  = matrix[0].size();
        int *height = new int[colNum], *left = new int[colNum], *right = new int[colNum];
        memset(height, 0, colNum*sizeof(int));
        
        int res = 0, locMax, tmp;
        for(int line = 0; line < lineNum; line++) {
            locMax = 0;
            for(int col = 0; col < colNum; col++) {
                if(matrix[line][col] == '1') height[col]++;
                else height[col] = 0;
                
                left[col] = col;
                while(col > 0 && height[col] <= height[left[col] - 1]) left[col] = left[left[col] - 1];
            }
            
            for(int col = colNum - 1; col >= 0; col--) {
                right[col] = col;
                while(right[col] < colNum && height[col] <= height[right[col]+1]) right[col] = right[right[col] + 1];
            }
            
            for(int col = 0; col < colNum; col++) {
                tmp = height[col] * (right[col] - left[col] + 1);
                locMax = max(locMax, tmp);
            }
            res = max(res, locMax);
        }
        return res;
    }
};

//dP 12ms ，状态转移方程如下所示

left(i,j) = max(left(i-1,j), curleft), curleft can be determined from the current row
right(i,j) = min(right(i-1,j), curright), curright can be determined from the current row
height(i,j) = height(i-1,j) + 1, if matrix[i][j]=='1';
height(i,j) = 0, if matrix[i][j]=='0'

class Solution {public:
int maximalRectangle(vector<vector<char> > &matrix) {
    if(matrix.empty()) return 0;
    const int m = matrix.size();
    const int n = matrix[0].size();
    int left[n], right[n], height[n];
    fill_n(left,n,0); fill_n(right,n,n); fill_n(height,n,0);
    int maxA = 0;
    for(int i=0; i<m; i++) {
        int cur_left=0, cur_right=n; 
        for(int j=0; j<n; j++) { // compute height (can do this from either side)
            if(matrix[i][j]=='1') height[j]++; 
            else height[j]=0;
        }
        for(int j=0; j<n; j++) { // compute left (from left to right)
            if(matrix[i][j]=='1') left[j]=max(left[j],cur_left);
            else {left[j]=0; cur_left=j+1;}
        }
        // compute right (from right to left)
        for(int j=n-1; j>=0; j--) {
            if(matrix[i][j]=='1') right[j]=min(right[j],cur_right);
            else {right[j]=n; cur_right=j;}    
        }
        // compute the area of rectangle (can do this from either side)
        for(int j=0; j<n; j++)
            maxA = max(maxA,(right[j]-left[j])*height[j]);
    }
    return maxA;
}
};

// 28ms 用O(n)的栈模拟算法，实现
class Solution {
private:
    int height[1000];
public:
    int maximalRectangle(vector<vector<char>>& matrix) {
        if(matrix.empty()) return 0;
        int lineNum = matrix.size();
        int colNum  = matrix[0].size();
        memset(height, 0, 1000*sizeof(int));
                
        int res = 0, locMax, tmp;
        for(int line = 0; line < lineNum; line++) {
            locMax = 0;
            
            for(int col = 0; col < colNum; col++) {
                if(matrix[line][col] == '1') height[col]++;
                else height[col] = 0;
            }
            
            stack<int> indStk;
            int ind = 0, locMax = 0, tmp, area;
            while( ind < colNum) {
                if(indStk.empty() || height[ind] >= height[indStk.top()]) {
                    indStk.push(ind++);
                }else {
                    tmp = indStk.top();
                    indStk.pop();
                    area = height[tmp] * (indStk.empty() ? ind : ind - indStk.top() - 1);
                    locMax = locMax < area ? area : locMax;
                }
            }
            while(!indStk.empty()) {
                tmp = indStk.top();
                indStk.pop();
                area = height[tmp] * (indStk.empty() ? ind : ind - indStk.top() - 1);
                locMax = locMax < area ? area : locMax;
            }
            
            res = res < locMax ? locMax : res;
        }
        return res;
    }
};
