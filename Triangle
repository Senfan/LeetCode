class Solution {
public:
    int minimumTotal(vector<vector<int> > &tri) {
        int lines = tri.size();
        for(int i = 1; i < lines; i++) {
            tri[i][0] += tri[i-1][0];
            for(int j = 1; j < i; j++) {
                tri[i][j] += min(tri[i-1][j-1], tri[i-1][j]);
            }
            tri[i][i] += tri[i-1][i-1];
        }
        int res = INT_MAX;
        for(int i = 0; i < lines; i++) {
            res = min(res, tri[lines-1][i]);
        }
        return res;
    }
};

//S :暴力枚举 TLE
class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        if(triangle.empty()) return 0;
        int deepth = triangle.size() - 1;
        int res = INT_MAX;
        dfsSum(triangle, 0, deepth, triangle[0][0], res, 0);
        return res;
    }
    
    void dfsSum(vector<vector<int>> &triangle, int level, int &deepth, int curSum, int &res, int ind) {
        if(level == deepth) {res = min(curSum, res); return;}
        
        dfsSum(triangle, level+1, deepth, curSum + triangle[level+1][ind], res, ind);
        if(ind + 1 < triangle[level+1].size()) dfsSum(triangle, level+1, deepth, curSum + triangle[level+1][ind+1], res, ind+1);
    }
};

//S ： DP 8ms
class Solution {
public:
    int minimumTotal(vector<vector<int>>& T) {
        if(T.empty()) return 0;
        int deepth = T.size();
        int tmpMin;
        for(int i = 1; i < deepth; i++) {
            T[i][0] += T[i-1][0];
            T[i][i] += T[i-1][i-1];
            for(int j = 1; j < i; j++) {
                tmpMin = T[i-1][j-1] > T[i-1][j] ? T[i-1][j] : T[i-1][j-1];
                T[i][j] += tmpMin;
            }
        }
        int res = INT_MAX;
        for(int i = 0; i < deepth; i++)
           if(res > T[deepth-1][i]) res = T[deepth-1][i];
        return res;
    }
};