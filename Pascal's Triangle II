class Solution {
public:
    vector<int> getRow(int rowIndex) {
        vector<int> res(rowIndex+1);
        res[0] = 1;
        for(int i = 1; i <= rowIndex; i++) {
            for(int j = i; j > 0; j--) {
                res[j] += res[j-1];
            }
        }
        return res;
    }
};

//4ms
//问题解决的角度不同，可以产生不同的问题途径：本题中，若要从后面往前覆盖，则就不用记录需要交换的值！！！节省了问题的记录时间
class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        vector<vector<int>> res;
        vector<int> v1(1,1);
        if(numRows == 0) return res;
        res.push_back(v1);
        if(numRows == 1) return res;
        
        for(int i = 2; i <= numRows; i++) {
            vector<int> tmp;
            tmp.push_back(1);
            for(int j = 1; j < i-1; j++) tmp.push_back(res[i-2][j] + res[i-2][j-1]);
            tmp.push_back(1);
            res.push_back(tmp);
        }
        return res;
    }
};