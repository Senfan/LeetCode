//TLE
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m = matrix.size(), n = matrix[0].size();
        
        for(int c = 0; c < m; c++) {
            if(matrix[c][0] <= target && matrix[c][n-1] >= target && binarySearch(c, target, matrix)) return true;
            if(matrix[c][0] > target) return false;
        }
        return false;
    }
    
    bool binarySearch(int col, int target, vector<vector<int>> matrix) {
        int left = 0, right = matrix[0].size() - 1;
        while(left <= right) {
            int mid = (left + right) >> 1;
            if(matrix[col][mid] == target) return true;
            if(matrix[col][mid] > target) right = mid - 1;
            else left = mid + 1;
        }
        return false;
    }
};

//可以继续细下心来，仔细推敲规律！！！ O(m+n)
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m = matrix.size();
        if(m == 0) return false;
        int n = matrix[0].size();
        
        int i = 0, j = n - 1;
        
        while(i < m && j >= 0) {
            if(matrix[i][j] == target) return true;
            if(matrix[i][j] > target) j--;
            else i++;
        }
        return false;
    }
};