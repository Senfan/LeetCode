class Solution {
public:
    int trap(int A[], int n) {
        if(n == 0) return 0;
        stack<int> stk;

        int i;
        for(i = 0; i < n; i++) {
            if(A[i]) {
                stk.push(i);
                break;
            }
        }
        if(i == n - 1) return 0;
        bool isCan = false;
        int res = 0;
        i++;
        for(; i < n; i++) {
            if(A[i] >= A[stk.top()] && !isCan) {
                stk.pop();
                stk.push(i);
            }else if(A[i] < A[stk.top()]){
                stk.push(i);
                isCan = true;
            }else {
                do {
                    int bottom = A[stk.top()];
                    stk.pop();
                    if(stk.empty()) break;
                    int left = A[stk.top()];
                    int right = A[i];

                    if(right < left) {
                        res += ((right - bottom) * ( i - stk.top() - 1));
                    }else {
                        res += ((left - bottom) * (i - stk.top() - 1));
                    }
                }while(!stk.empty() && A[i] >= A[stk.top()]);
                if(stk.empty()) {
                    stk.push(i);
                    isCan = false;
                }else {
                    stk.push(i);
                }
            }
        }
        return res;
    }
};

//12ms
class Solution {
public:
    int trap(vector<int>& height) {
        if(height.empty()) return 0;
        int cnt = height.size();

        int ind = 0;
        for(; ind < cnt; ind++) {
            if(height[ind]) break;
        }

        stack<int> stk;
        int res = 0;
        while(ind < cnt) {
            if(stk.empty() || height[ind] <= height[stk.top()]) {
                if(!stk.empty() && height[ind] == height[stk.top()]) stk.top() = ind;
                else stk.push(ind);
                ind++;
            }else {
                int bottom = height[stk.top()];
                stk.pop();
                while(!stk.empty() && height[stk.top()] <= height[ind]) {
                    res += (ind - stk.top() - 1) * (height[stk.top()] - bottom);
                    bottom = height[stk.top()];
                    stk.pop();
                }
                if(!stk.empty()) {
                    res += (ind - stk.top() - 1) * (height[ind] - bottom);
                }
                stk.push(ind);
            }
        }
        return res;
    }
};