// 单词唯一的时候的解！！WA
class Solution {
public:
    vector<int> findSubstring(string s, vector<string>& words) {
        vector<int> res;
        if(s.empty() || words.empty()) return res;
        int sLen = s.size(), wordNum = words.size(), wordLen = words[0].size();
        unordered_map<string, int> dict;
        for(int i = 0; i < wordNum; i++) {
            dict[words[i]]++;
        }
        
        for(int i = 0; i < sLen - wordNum * wordLen + 1; i++) {
            int cnt = 0;
            int cur = i;
            string target;
            while(true) {
                target = s.substr(cur, wordLen);
                if(dict.count(target) > 0) {
                    if(dict[target] <= i) {
                        cnt++;
                        dict[target] = cur;
                    }else {
                        if(dict[target] < cur) { // have existed
                            break;
                        }else {
                            cnt++;
                        }
                    }
                    if(cnt == wordNum) {
                        res.push_back(i);
                        break;
                    }
                    cur += wordLen;
                }else {
                    break;
                }
            }
        }
        return res;
    }
};

//804ms :太慢，目标时间50ms左右，可以利用滑动窗口机制进行优化，这样的话就避免了已经比较的继续进行比较，从而减小时间复杂度！！！
class Solution {
public:
    vector<int> findSubstring(string s, vector<string>& words) {
        vector<int> res;
        if(s.empty() || words.empty()) return res;
        int sLen = s.size(), wordNum = words.size(), wordLen = words[0].size();
        unordered_map<string, int> dict;
        for(int i = 0; i < wordNum; i++) {
            dict[words[i]]++;
        }
        
        for(int i = 0; i < sLen - wordNum * wordLen + 1; i++) {//滑动窗口的移动优化在这里，因为满足一个单词长度后，后面的已经比较了，所以，不需要继续以接下来的下标开始了
            int cnt = 0;
            int cur = i;
            string target;
            unordered_map<string, int> count;
            while(true) {
                target = s.substr(cur, wordLen);
                if(dict.count(target) > 0) {
                    count[target]++;
                    cnt++;
                    if(cnt == wordNum) {
                        bool isDone = true;
                        for(auto each : dict) {
                            if(dict[each.first] != count[each.first]) {
                                isDone = false;
                                break;
                            }
                        }
                        if(isDone) res.push_back(i);
                        else break;
                    }else {
                        cur += wordLen;
                    }
                }else {
                    break;
                }
            }
        }
        return res;
    }
};

//滑动窗口机制的优化程序52ms
class Solution {
public:
    vector<int> findSubstring(string S, vector<string> &L) {
        vector<int> ans;
        int n = S.size(), cnt = L.size();
        if (n <= 0 || cnt <= 0) return ans;

        // init word occurence
        unordered_map<string, int> dict;
        for (int i = 0; i < cnt; ++i) dict[L[i]]++;

        // travel all sub string combinations
        int wl = L[0].size();
        for (int i = 0; i < wl; ++i) {
            int left = i, count = 0;
            unordered_map<string, int> tdict;
            for (int j = i; j <= n - wl; j += wl) {
                string str = S.substr(j, wl);
                // a valid word, accumulate results
                if (dict.count(str)) {
                    tdict[str]++;
                    if (tdict[str] <= dict[str]) 
                        count++;
                    else {
                        // a more word, advance the window left side possiablly
                        while (tdict[str] > dict[str]) {
                            string str1 = S.substr(left, wl);
                            tdict[str1]--;
                            if (tdict[str1] < dict[str1]) count--;
                            left += wl;
                        }
                    }
                    // come to a result
                    if (count == cnt) {
                        ans.push_back(left);
                        // advance one word
                        tdict[S.substr(left, wl)]--;
                        count--;
                        left += wl;
                    }
                }
                // not a valid word, reset all vars
                else {
                    tdict.clear();
                    count = 0;
                    left = j + wl;
                }
            }
        }

        return ans;
    }
};
