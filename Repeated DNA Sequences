class Solution {
public:
    vector<string> findRepeatedDnaSequences(string s) {
        vector<string> res;
        int len = s.size();
        if(len == 0) return res;
        unordered_map<int, int> strMap;
        
        int i = 0, t = 0;
        while(i < len) {
            if(strMap[t = (t << 3 | s[i++] & 7) & 0x3FFFFFFF]++ == 1) 
                res.push_back(s.substr(i-10, 10));
        }
        return res;
    }
};


//MLE
class Solution {
public:
    vector<string> findRepeatedDnaSequences(string s) {
        int len = s.size();
        vector<string> res;
        if(len < 20) return res;
        unordered_map<string, int> map;
        
        for(int i = 0; i <= len - 10; i++) {
            string key = s.substr(i, 10);
            map[key]++;
        }
        
        for(auto it = map.begin(); it != map.end(); it++) {
            if(map[it->first] > 1) res.push_back(it->first);
        }
        return res;
    }
};