//Solution1： TLE :枚举所有方案的答案，然后比较得出最终答案 =>看看能不能进行剪枝
class Solution {
public:

	void recuFun(vector<vector<int> > &dungeon, int lines, int cols, int i, int j, int blood, int tmpRes, int &res) {
		if(i >= lines || j >= cols) return;
		if(blood + dungeon[i][j] > 0) {
			blood += dungeon[i][j];
		}else {
			tmpRes += (1 - (blood + dungeon[i][j]));
			blood = 1;
		}
		if(i == lines-1 && j == cols-1) {
			if(tmpRes < res) res = tmpRes;
			return;
		}else{
			recuFun(dungeon, lines, cols, i, j+1, blood, tmpRes, res);
			recuFun(dungeon, lines, cols, i+1, j, blood, tmpRes, res);
		}
	}
    int calculateMinimumHP(vector<vector<int> >& dungeon) {
    	int lines = dungeon.size();
    	int cols = dungeon[0].size();
    	int res = INT_MAX;
    	recuFun(dungeon, lines, cols, 0, 0, 1, 1, res);
    	return res;
    }
};


//动态规划方案：
// solution 2: WA，此方案是正向推，其实隐藏着trap:不存在最优子结构性质，所以算法本身是错误的，但是反过来，因为知道最后要达到的状态，可以从后往前推，得到族中答案！=> 注意问题的初始状态以及最终状态，若知道初始状态，可以从前往后，特别是如若知道最终状态，可以从后往前推。
class Solution {
public:
    int calculateMinimumHP(vector<vector<int> >& dungeon) {
        int lines = dungeon.size();
        int cols = dungeon[0].size();
        vector<vector<int> > blood;
        vector<int> tmp;
        for(int i = 0; i < lines; i++) {
            tmp.clear();
            for(int j = 0; j < cols; j++) {
                if(i == 0) {
                    if(j == 0) {
                        if(dungeon[i][j] > 0) {
                            tmp.push_back(dungeon[i][j]+1);
                            dungeon[i][j] = 1;
                        }else {
                            tmp.push_back(1);
                            dungeon[i][j] = 1 - dungeon[i][j];
                        }
                    }else {
                        if(tmp[j-1] + dungeon[i][j] > 0) {
                            tmp.push_back(tmp[j-1] + dungeon[i][j]);
                            dungeon[i][j] = dungeon[i][j-1];
                        }else {
                            tmp.push_back(1);
                            dungeon[i][j] = dungeon[i][j-1] - (tmp[j-1] + dungeon[i][j]) + 1; 
                        }
                    }
                }else {
                    if(j == 0) {
                        if(blood[i-1][0] + dungeon[i][j] > 0) {
                            tmp.push_back(blood[i-1][0] + dungeon[i][j]);
                            dungeon[i][j] = dungeon[i-1][j];
                        }else {
                            tmp.push_back(1);
                            dungeon[i][j] = dungeon[i-1][j] - (blood[i-1][0] + dungeon[i][j]) + 1;
                        }
                    }else {
                        if(blood[i-1][j] + dungeon[i][j] > 0) {
                            if(tmp[j-1] + dungeon[i][j] > 0) {
                                if(dungeon[i-1][j] < dungeon[i][j-1]) {
                                    tmp.push_back(blood[i-1][j] + dungeon[i][j]);
                                    dungeon[i][j] = dungeon[i-1][j];
                                }else {
                                    tmp.push_back(tmp[j-1] + dungeon[i][j]);
                                    dungeon[i][j] = dungeon[i][j-1];
                                }
                            }else {
                                if(dungeon[i][j-1] - (tmp[j-1] + dungeon[i][j]) + 1 < dungeon[i-1][j]) {
                                    tmp.push_back(1);
                                    dungeon[i][j] = dungeon[i][j-1] - (tmp[j-1] + dungeon[i][j]) + 1;
                                }else {
                                    tmp.push_back(blood[i-1][j] + dungeon[i][j]);
                                    dungeon[i][j] = dungeon[i-1][j];
                                }
                            }
                        }else { //blood[i-1][j] + dungeon[i][j] <= 0 ????
                           if(tmp[j-1] + dungeon[i][j] > 0) {
                                if(dungeon[i-1][j] - (blood[i-1][j] + dungeon[i][j]) + 1 < dungeon[i][j-1]) {
                                    tmp.push_back(1);
                                    dungeon[i][j] = dungeon[i-1][j] - (blood[i-1][j] + dungeon[i][j]) + 1;
                                }else {
                                    tmp.push_back(tmp[j-1] + dungeon[i][j]);
                                    dungeon[i][j] = dungeon[i][j-1];
                                }
                            }else {//up
                                tmp.push_back(1);
                                if(dungeon[i-1][j] - (blood[i-1][j] + dungeon[i][j]) < dungeon[i][j-1] - (tmp[j-1] + dungeon[i][j])){
                                    dungeon[i][j] = dungeon[i-1][j] - (blood[i-1][j] + dungeon[i][j]) + 1;
                                }else {
                                    dungeon[i][j] = dungeon[i][j-1] - (tmp[j-1] + dungeon[i][j]) + 1;
                                }
                            }
                        }
                    }
                }
            }
            blood.push_back(tmp);
        }
        return dungeon[lines-1][cols-1];
    }
};

//soulution 3:动态规划，从后往前推的过程，其实动态规划本质上就是记录了子结构的一种映射解决方案。

class Solution {
public:

    int calculateMinimumHP(vector<vector<int> >& dungeon) {
    	int lines = dungeon.size();
    	int cols = dungeon[0].size();
    	
    	for(int i = lines - 1; i >= 0; i--) {
    	    for(int j = cols - 1; j >= 0; j--) {
    	        if(i == lines - 1 && j == cols - 1) {
    	            dungeon[i][j] = max(1, 1 - dungeon[i][j]);
    	        }else if(i == lines - 1) {
    	            dungeon[i][j] = max(1, dungeon[i][j+1] - dungeon[i][j]);
    	        }else if(j == cols - 1) {
    	            dungeon[i][j] = max(1, dungeon[i+1][j] - dungeon[i][j]);
    	        }else {
    	            dungeon[i][j] = max(1, min(dungeon[i+1][j], dungeon[i][j+1]) - dungeon[i][j]);
    	        }
    	    }
    	}
    	return dungeon[0][0];
    }
};