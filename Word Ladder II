//其实BFS用到的只有两层，其他的用不到,所以可以用两层来记录，这样一来就可以很方便的遍历当前层的所有节点了，否则还需要可以标记
class Solution {
public:
    vector<vector<string> > findLadders(string start, string end, unordered_set<string> &dict) {
           unordered_set<string> visited; //判重
           unordered_set<string> current,next; //当前层和下一层，用集合是为了去重
           unordered_map<string,vector<string> > father;

           int level=0;  //层数
           bool found=false;

           current.insert(start);
           while(!current.empty() && !found){
                ++level;
                //将本层全部置为已访问，防止同层之间互指，导致路径非最短
                for(auto word : current)
                    visited.insert(word);
                for(auto word : current){
                    for(size_t i=0;i<word.size();++i){
                        string new_word=word;
                        for(char c='a';c<='z';c++){
                            if(c==new_word[i])continue;
                            swap(c,new_word[i]);

                            if(new_word==end)found=true; //找到了

                            if(visited.count(new_word)==0
                                    && (dict.count(new_word)>0 || new_word==end)){
                                next.insert(new_word);
                                father[new_word].push_back(word);
                            }
                            swap(c,new_word[i]);
                        }

                    }
                }
                current.clear();
                swap(current,next);
           }
            vector<vector<string> > result;
            if(found){
                vector<string> path;
                dfs(start, father,result, path ,end);
            }
            return result;
    }
    
    void dfs(string start, unordered_map<string, vector<string>> &father, vector<vector<string>> &res, vector<string> path, string child) {
        path.push_back(child);
        if(child == start) {
            reverse(path.begin(), path.end());
            res.push_back(path);
            return;
        }
        for(int i = 0; i < father[child].size(); i++) {
            dfs(start, father, res, path, father[child][i]);
        }
    }
};
