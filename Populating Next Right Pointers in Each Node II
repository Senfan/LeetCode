/**
 * Definition for binary tree with next pointer.
 * struct TreeLinkNode {
 *  int val;
 *  TreeLinkNode *left, *right, *next;
 *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}
 * };
 */
 //36ms
class Solution {
public:
    void connect(TreeLinkNode *root) {
        if(root == NULL) return;
        
        TreeLinkNode *head = NULL;
        TreeLinkNode *curNode = root;
        TreeLinkNode *prevNode = NULL;
        
        while(curNode) {
            
            while(curNode) {
                if(curNode -> left) {
                    if(prevNode) {
                        prevNode -> next = curNode -> left;
                    }else {
                        head = curNode -> left;
                    }
                    prevNode = curNode -> left;
                }
                
                if(curNode -> right) {
                    if(prevNode) {
                        prevNode -> next = curNode -> right;
                    }else {
                        head = curNode -> right;
                    }
                    prevNode = curNode -> right;
                }
                curNode = curNode -> next;
            }
            
            curNode = head;
            head = NULL;
            prevNode = NULL;
        }
    }
};

//BFS 40ms但不是常量空间
class Solution {
public:
    void connect(TreeLinkNode *root) {
        if(root == NULL) return;
        queue<TreeLinkNode*> que;
        que.push(root);
        que.push(NULL);
        TreeLinkNode *curNode;
        while(que.size() > 1) {
            curNode = que.front();
            que.pop();
            if(curNode == NULL) {
                que.push(NULL);
                continue;
            }
            
            curNode -> next = que.front();
            if(curNode -> left) que.push(curNode -> left); 
            if(curNode -> right) que.push(curNode -> right);
        }
    }
};