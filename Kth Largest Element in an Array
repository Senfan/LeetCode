class Solution {
public:

    void buildHeap(vector<int> &nums) {
        int size = nums.size();
        if(size < 2) return;
        int curPos = (size - 2) >> 1;
        while(curPos >= 0) {
            siftDown(nums, curPos, size-1);
            curPos--;
        }
    }
    void siftDown(vector<int> &nums, int start, int m) {
        int i = start, j = 2 * i + 1, tmp = nums[i];
        while(j <= m) {
            if(j < m && nums[j] < nums[j+1]) j++;
            if(tmp >= nums[j]) break;
            else {
                nums[i] = nums[j];
                i = j; j = 2 * j + 1;
            }
        }
        nums[i] = tmp;
    }
    
    int findKthLargest(vector<int>& nums, int k) {
        buildHeap(nums);
        int res;
        int pos = nums.size() - 1;
        while(k--) {
            res = nums[0];
            nums[0] = nums[pos--];
            siftDown(nums, 0, pos);
        }
        return res;
    }
};