//16ms 第二遍编码， 时间耗费在函数调用上，另外主要是判定更新上第一次编码中，只做一次判断就可以更新，而本次编码中不做判断，直接全部更新
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if(prices.size() <= 1) return 0;
        const int len = prices.size();
        vector<int> dp0(len), dp1(len);
        dp0[0] = 0, dp1[len - 1] = 0;
        int curMin = prices[0], curMax = prices[len-1];

        for(int i = 1; i < len ; i++) {
            dp0[i] = max(dp0[i-1], prices[i] - curMin);
            curMin = min(curMin, prices[i]);
        }
        for(int i = len - 2; i >= 0; i--) {
            dp1[i] = max(dp1[i+1], curMax - prices[i]);
            curMax = max(curMax, prices[i]);
        }
        int res = 0;
        for(int i = 0; i < len; i++) {
            res = max(res, dp0[i] + dp1[i]);
        }
        return res;
    }
};

//8ms
class Solution {
public:
    int maxProfit(vector<int> &prices) {
        if(prices.empty()) return 0;
        int len = prices.size();
        
        int curMin = prices[0];
        int curMax = INT_MIN;
        
        int res = 0;
        int *dp = new int[len];
        int *dpR = new int[len];
        memset(dp, 0, len);
        memset(dpR, 0, len);
        
        for(int i = 0; i < len; i++) {
            if(prices[i] >= curMin) {
                curMax = prices[i] - curMin > curMax ? prices[i] - curMin : curMax;
            }else {
                curMin = prices[i];
            }
            dp[i] = curMax;
        }
        
        int subRe = 0;
        curMax = INT_MIN;
        for(int i = len - 1; i >= 0; i--) {
            if(prices[i] > curMax) {
                curMax = prices[i];
            }else {
                subRe = curMax - prices[i] > subRe ? curMax - prices[i] : subRe;
            }
            dpR[i] = subRe;
        }
        
        int ans = 0;
        for(int i = 0; i < len; i++) {
            if(dp[i] + dpR[i] > ans) {
                ans = dp[i] + dpR[i];
            }
        }
        return ans;
    }
};