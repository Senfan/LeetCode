class Solution {
public:
    int maxProfit(vector<int> &prices) {
        if(prices.empty()) return 0;
        int len = prices.size();
        
        int curMin = prices[0];
        int curMax = INT_MIN;
        
        int res = 0;
        int *dp = new int[len];
        int *dpR = new int[len];
        memset(dp, 0, len);
        memset(dpR, 0, len);
        
        for(int i = 0; i < len; i++) {
            if(prices[i] >= curMin) {
                curMax = prices[i] - curMin > curMax ? prices[i] - curMin : curMax;
            }else {
                curMin = prices[i];
            }
            dp[i] = curMax;
        }
        
        int subRe = 0;
        curMax = INT_MIN;
        for(int i = len - 1; i >= 0; i--) {
            if(prices[i] > curMax) {
                curMax = prices[i];
            }else {
                subRe = curMax - prices[i] > subRe ? curMax - prices[i] : subRe;
            }
            dpR[i] = subRe;
        }
        
        int ans = 0;
        for(int i = 0; i < len; i++) {
            if(dp[i] + dpR[i] > ans) {
                ans = dp[i] + dpR[i];
            }
        }
        return ans;
    }
};