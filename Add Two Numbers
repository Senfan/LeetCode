O(n+m) 57ms
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *addTwoNumbers(ListNode *l1, ListNode *l2) {
        ListNode *curL1 = l1, *curL2 = l2, *pre = NULL;
        int d = 0, tmp = 0;
        while(curL1 || curL2) {
            if(curL1 && curL2) {
                tmp = curL1 -> val + curL2 -> val + d;
                d = tmp / 10;
                curL1 -> val = tmp % 10;
                
                pre = curL1;
                curL1 = curL1 -> next;
                curL2 = curL2 -> next;
            }else if(curL1) {
                tmp = curL1 -> val + d;
                curL1 -> val = tmp % 10;
                d = tmp / 10;
                
                pre = curL1;
                curL1 = curL1 -> next;
            }else {
                tmp = curL2 -> val + d;
                d = tmp / 10;
                curL2 -> val = tmp % 10;
                
                pre -> next = curL2;
                pre = curL2;
                curL2 = curL2 -> next;
            }
        }
        if(d) {
            ListNode *tail = new ListNode(d);
            pre -> next = tail;
        }
        return l1;
    }
};

//36ms
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        if(l1 == NULL) return l2;
        if(l2 == NULL) return l1;
        int tag = 0;
        ListNode *cur1 = l1, *cur2 = l2, *pre = NULL;
        int sum;
        while(cur1 && cur2) {
            sum = cur1 -> val + cur2 -> val + tag;
            tag = sum >= 10;
            cur1 -> val = sum % 10;
            pre = cur1;
            cur1 = cur1 -> next;
            cur2 = cur2 -> next;
        }
        while(cur1) {
            sum = cur1 -> val + tag;
            tag = sum >= 10;
            cur1 -> val = sum % 10;
            pre = cur1;
            cur1 = cur1 -> next;
        }
        
        while(cur2) {
            sum = cur2 -> val + tag;
            tag = sum >= 10;
            cur2 -> val = sum % 10;
            pre -> next = cur2;
            pre = cur2;
            cur2 = cur2 -> next;
        }
        
        if(tag) {
            pre -> next = new ListNode(1);
        }
        return l1;
    }