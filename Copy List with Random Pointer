class Solution {
public:
    RandomListNode *recFun(RandomListNode *head1) {
        if(head1 == NULL) return NULL;
        RandomListNode *head2 = new RandomListNode(head1-> label);
        head2 -> next = recFun(head1 -> next);
        return head2;
    }
    RandomListNode *copyRandomList(RandomListNode *head) {
        if(head == NULL) return NULL;
        RandomListNode *head2 = recFun(head);
        unordered_map<RandomListNode*, int> map1;
        unordered_map<int, RandomListNode*> map2;
        RandomListNode *curNode = head;
        int cnt = 0;
        while(curNode) {
            map1[curNode] = ++cnt;
            curNode = curNode -> next;
        }
        curNode = head2, cnt = 0;
        while(curNode) {
            map2[++cnt] = curNode;
            curNode = curNode -> next;
        }
        
        curNode = head;
        RandomListNode *curNode2 = head2;
        while(curNode) {
            if(curNode -> random == NULL) {
                curNode2 -> random = NULL;
            }else {
                curNode2 -> random = map2[map1[curNode -> random]];
            }
            curNode = curNode -> next;
            curNode2 = curNode2 -> next;
        }
        return head2;
    }
};

//直接映射，不知道那地方错了，总是WA 1222 122#
class Solution {
public:
    RandomListNode *copyRandomList(RandomListNode *head) {
        if(head == NULL) return head;
        
        unordered_map<RandomListNode*, RandomListNode*> map;
        RandomListNode *curNode = head;
        RandomListNode *newHead = new RandomListNode(head -> label), *newRandom = NULL;
        map[head] = newHead;
        if(head -> random == head) {
            newHead -> random = newHead;
        }else {
            if(head -> random == NULL) newHead -> random = NULL;
            else {
                newRandom = new RandomListNode(head -> random -> label);
                newHead -> random = newRandom;
                map[head -> random] = newRandom;
            }
        }
        
        RandomListNode *curNew = newHead;
        curNode = curNode -> next;
        while(curNode) {
            if(map.count(curNode) > 0) {
                curNew -> next = map[curNode];
            }else {
                RandomListNode *tmpNode = new RandomListNode(curNode -> label);
                map[curNode] = tmpNode;
                curNew -> next = tmpNode;
                
                if(curNode -> random == NULL) {
                    curNew -> next -> random = NULL;
                }else {
                    if(map.count(curNode -> random) > 0) {
                        curNew -> next -> random = map[curNode -> random];
                    }else {
                        RandomListNode *tmpRandom = new RandomListNode(curNode -> random -> label);
                        map[curNode -> random] = tmpRandom;
                        curNew -> next -> random = tmpRandom;
                    }
                }
            }
            curNode = curNode -> next;
            curNew = curNew -> next;
        }
        return newHead;
    }
};