//17ms 
class Solution {
public:
    vector<int> searchRange(int A[], int n, int target) {
        vector<int> res;
        if(n == 0) return res;
        
        int low = 0, high = n, pos = -1, mid;
        while(low <= high) {
            mid = (low + high) >> 1;
            if(A[mid] == target) {
                pos = mid;
                break;
            }else if(A[mid] > target) {
                high = mid - 1;
            }else {
                low = mid + 1;
            }
        }
        
        if(pos == -1) {
            res = {-1, -1};
            return res;
        }
        
        int left, right;
        low = 0, high = pos;
        while(low <= high) {
            mid = (low + high) >> 1;
            if(A[mid] < target) low = mid + 1;
            else {
                high = mid - 1;
            }
        }
        left = low;
        
        low = pos, high = n-1;
        while(low <= high) {
            mid = (low + high) >> 1;
            if(A[mid] > target) high = mid - 1;
            else {
                low = mid + 1;
            }
        }
        right = high;
        
        res = {left, right};
        
        return res;
    }
};

// S 12ms
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> res{-1, -1};
        if(nums.empty()) return res;

        int r = nums.size() - 1, l = 0;
        int mid;
        while(l <= r) {
            mid = l + ((r - l) >> 1);
            if(nums[mid] < target) {
                l = mid + 1;
            }else if(nums[mid] > target) {
                r = mid - 1;
            }else {
                break;
            }
        }

        if(l > r) return res;
        else {
            if(nums[l] == target) res[0] = l;
            else {
                int lr = mid;
                while(l <= lr) {
                    int tmp = l + ((lr - l) >> 1);
                    if(nums[tmp] < target) l = tmp + 1;
                    else {
                        lr = tmp - 1;
                    }
                }
                res[0] = l;
            }

            if(nums[r] == target) res[1] = r;
            else {
                int rl = mid;
                while(rl <= r) {
                    int tmp = rl + ((r - rl) >> 1);
                    if(nums[tmp] > target) r = tmp - 1;
                    else {
                        rl = tmp + 1;
                    }
                }
                res[1] = rl - 1;
            }
        }
        return res;
    }
};
