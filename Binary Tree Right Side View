/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> rightSideView(TreeNode *root) {
        vector<int> res;
        if(root == NULL) return res;
        
        stack<TreeNode*> stk;
        stack<int> highStk;
        int curHigh = 0;
        
        //preOrder traval
        TreeNode *p = root;
        stk.push(NULL);
        highStk.push(0);
        int eleHigh = 1;
        
        while(p != NULL) {
            if(eleHigh > curHigh) {
                res.push_back(p -> val);
                curHigh++;
            }
            eleHigh++;
            
            if(p -> left) {
                stk.push(p -> left);
                highStk.push(eleHigh);
            }
            if(p -> right) p = p -> right;
            else {
                p = stk.top();
                stk.pop();
                eleHigh = highStk.top();
                highStk.pop();
            }
        }
        
        return res;
    }
};


// S DFS : 4ms
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        vector<int> res;
        if(root == NULL) return res;
        dfs(root, res, 1);
        return res;
    }
    
    void dfs(TreeNode *root, vector<int> &res, int curDeep) {
        if(root == NULL) return;
        if(curDeep > res.size()) res.push_back(root -> val);
        dfs(root -> right, res, curDeep + 1);
        dfs(root -> left, res, curDeep + 1);
    }
};

// 4ms
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        
        if(root == NULL) return res;
        int curLevel = 0, maxLevel = -1;
        preOrder(root, curLevel, maxLevel);
        return res;
    }
private:
    vector<int> res;
    void preOrder(TreeNode *root, int curl, int &maxl) {
        if(root) {
            if(curl > maxl) {
                res.push_back(root -> val);
                maxl = curl;
            }
            preOrder(root -> right, curl+1, maxl);
            preOrder(root -> left, curl+1, maxl);
        }
    }
};