class Solution {
public:
    void recurFun(string digits, string tmp, vector<string> &res, vector<string> &map) {
        if(digits.empty()) {
            if(!tmp.empty()) res.push_back(tmp);
            return;
        }
        int len = map[digits[0]-'0'].size();
        for(int i = 0; i < len; i++) {
            recurFun(digits.substr(1), tmp+map[digits[0]-'0'][i], res, map);
        }
    }

    vector<string> letterCombinations(string digits) {
        vector<string> map;
        map.push_back(" "), map.push_back(""), map.push_back("abc"), map.push_back("def"), map.push_back("ghi"), map.push_back("jkl"),
        map.push_back("mno"), map.push_back("pqrs"), map.push_back("tuv"), map.push_back("wxyz");
        
        vector<string> res;
        recurFun(digits, "", res, map);
        return res;
    }
};

// S 0ms
class Solution {
public:
    vector<string> letterCombinations(string digits) {
        vector<string> res;
        if(digits.empty()) return res;
        
        unordered_map<int, string> map;
        map[0] = map[1] = " ";
        map[2] = "abc", map[3] = "def", map[4] = "ghi";
        map[5] = "jkl", map[6] = "mno", map[7] = "pqrs";
        map[8] = "tuv", map[9] = "wxyz";
        string tmp = "";
        traceBack(digits, res, 0, digits.size(), tmp, map);
        return res;
    }
    
    void traceBack(string &digits, vector<string> &res, int ind, int len, string &s, unordered_map<int, string> &map) {
        if(ind == len) { res.push_back(s); return;}
        string ops = map[digits[ind] - '0'];
        for(int i = 0; i < ops.size(); i++) {
            s += ops[i];
            traceBack(digits, res, ind+1, len, s, map);
            s.pop_back();
        }
    }
};