class Solution {
public:
    ListNode* merge2Lists(ListNode *l1, ListNode *l2) {
        if(l1 == NULL) return l2;
        if(l2 == NULL) return l1;
        ListNode *res = NULL, *cur = res;
        if(l1 -> val > l2 -> val) res = l2, l2 = l2 -> next;
        else res = l1, l1 = l1 -> next;
        cur = res;
        while(l1 && l2) {
            if(l1 -> val > l2 -> val) {
                cur -> next = l2;
                l2 = l2 -> next;
                cur = cur -> next;
            }else {
                cur -> next = l1;
                l1 = l1 -> next;
                cur = cur -> next;
            }
        }
        while(l1) {
            cur -> next = l1;
            l1 = l1 -> next;
            cur = cur -> next;
        }
        while(l2) {
            cur -> next = l2;
            l2 = l2 -> next;
            cur = cur -> next; 
        }
        return res;
    }
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        int listNum = lists.size();
        if(listNum == 0) return NULL;
        if(listNum == 1) return lists[0];
        if(listNum == 2) return merge2Lists(lists[0], lists[1]);
        vector<ListNode*> tmp1(lists.begin(), lists.begin() + listNum / 2);
        vector<ListNode*> tmp2(lists.begin()+listNum/2, lists.end());
        return merge2Lists(mergeKLists(tmp1), mergeKLists(tmp2));
    }
};