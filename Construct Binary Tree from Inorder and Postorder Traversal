/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:

    TreeNode *recursePro(vector<int> &inorder, vector<int> &postorder, int iS, int iE, int pS, int pE) {
        if(iS > iE || pS > pE) return NULL;
        
        TreeNode *root = new TreeNode(postorder[pE]);
        if(pS == pE) return root;
        
        int rightCnt = 0;
        for(int i = iE; inorder[i] != postorder[pE]; rightCnt++, i--);
        
        root -> left = recursePro(inorder, postorder, iS, iE - rightCnt - 1, pS, pE - rightCnt - 1);
        root -> right = recursePro(inorder, postorder, iE - rightCnt + 1, iE, pE - rightCnt, pE - 1);
        
    }
    
    TreeNode *buildTree(vector<int> &inorder, vector<int> &postorder) {
        if(inorder.empty()) return NULL;
        return recursePro(inorder, postorder, 0, inorder.size() - 1, 0, postorder.size() - 1);
    }
};