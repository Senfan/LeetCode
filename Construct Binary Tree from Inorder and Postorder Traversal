/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 //16ms
class Solution {
public:

    TreeNode *recursePro(vector<int> &inorder, vector<int> &postorder, int iS, int iE, int pS, int pE) {
        if(iS > iE || pS > pE) return NULL;
        
        TreeNode *root = new TreeNode(postorder[pE]);
        if(pS == pE) return root;
        
        int rightCnt = 0;
        for(int i = iE; inorder[i] != postorder[pE]; rightCnt++, i--);
        
        root -> left = recursePro(inorder, postorder, iS, iE - rightCnt - 1, pS, pE - rightCnt - 1);
        root -> right = recursePro(inorder, postorder, iE - rightCnt + 1, iE, pE - rightCnt, pE - 1);
        
    }
    
    TreeNode *buildTree(vector<int> &inorder, vector<int> &postorder) {
        if(inorder.empty()) return NULL;
        return recursePro(inorder, postorder, 0, inorder.size() - 1, 0, postorder.size() - 1);
    }
};


//S 24ms
class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        unordered_map<int, int> map;
        for(int i = 0; i < inorder.size(); i++) map[inorder[i]] = i;
        TreeNode *root = recBuild(inorder, 0, inorder.size()-1, postorder, 0, postorder.size()-1, map);
        return root;
    }
    
    TreeNode* recBuild(vector<int> &inorder, int inL, int inR, vector<int> &postorder, int pL, int pR, unordered_map<int, int> &map) {
        if(inL > inR) return NULL;
        TreeNode *root = new TreeNode(postorder[pR]);
        root -> left = recBuild(inorder, inL, map[postorder[pR]]-1, postorder, pL, pL + map[postorder[pR]] - inL - 1, map);
        root -> right = recBuild(inorder, map[postorder[pR]]+1, inR, postorder, pL + map[postorder[pR]]-inL, pR-1, map);
        return root;
    }
};

//S 48ms
class Solution {
public:
    TreeNode* buildTree(vector<int>& iV, vector<int>& pV) {
        return helper(iV, 0, iV.size() - 1, pV, 0, pV.size() - 1);
    }
    
    TreeNode *helper(vector<int> &iV, int il, int ir, vector<int> &pV, int pl, int pr) {
        if(il <= ir) {
            TreeNode *root = new TreeNode(pV[pr]);
            int i;
            for(i = il; i <= ir; i++) {
                if(iV[i] == pV[pr]) break;
            }
            
            root -> left = helper(iV, il, i-1, pV, pl, pl+i-il-1);
            root -> right = helper(iV, i+1, ir, pV, pl+i-il, pr-1);
            return root;
        }else {
            return NULL;
        }
    }
};