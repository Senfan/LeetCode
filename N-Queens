//4ms
class Solution {
public:
    
    vector<vector<string> > solveNQueens(int n) {
        vector<string> lineVec(n, string(n, '.'));
        vector<vector<string> > chessboard;
        const int size = n;
        vector<int> flag(5*n-2, 1);
        backTrack(n, chessboard, lineVec, 0, flag);
        return chessboard;
    }
    
    void backTrack(int n, vector<vector<string>> &chessboard, vector<string> &rowString, int curLine, vector<int> &flag) {
        if(curLine == n) {chessboard.push_back(rowString); return;}
        for(int col = 0; col < n; col++) {
            if(flag[col] && flag[col+curLine+n] && flag[col-curLine+(n << 2) - 2]) {
                flag[col] = flag[col+curLine+n] = flag[col-curLine+(n << 2) - 2] = 0;
                rowString[curLine][col] = 'Q';
                backTrack(n, chessboard, rowString, curLine+1, flag);
                rowString[curLine][col] = '.';
                flag[col] = flag[col+curLine+n] = flag[col-curLine+(n << 2) - 2] = 1;
            }
        }
    }
};

//12ms  => int 虽然比bool耗费空间，但是由于是机器字长，所以运算时间比bool要短，把下列标记改成int则可以获得4ms的运行结果
class Solution {
public:
    
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> res;
        vector<string> oneRes(n, string(n, '.'));
        vector<bool> nVis(5 * n + 1, true);
        search(0, n, oneRes, res, nVis);
        return res;
    }
    
    void search(int cur, int n, vector<string> &oneRes, vector<vector<string>> &res, vector<bool> &nVis) {
        if(cur == n) {
            res.push_back(oneRes);
        }
        for(int i = 0; i < n; i++) {
            if(nVis[i] && nVis[cur+i+n] && nVis[cur-i + ( n << 2)]) {
                oneRes[cur][i] = 'Q';
                nVis[i] = nVis[cur+i+n] = nVis[cur-i + (n << 2)] = false;
                search(cur+1, n, oneRes, res, nVis);
                oneRes[cur][i] = '.';
                nVis[i] = nVis[cur+i+n] = nVis[cur-i + (n << 2)] = true;
            }
        }
    }
};