class Solution {
public:
    int myAtoi(string str) {
        int len = str.size();
        if(len == 0) return 0;
        
        int ind = 0;
        while(ind < len && isspace(str[ind])) ind++;
        if(ind == len || !(isdigit(str[ind]) || str[ind] == '-' || str[ind] == '+')) return 0;
        
        int res=0;
        int sign;
        if(str[ind] == '-') sign = -1;
        else sign = 1;
        
        if(str[ind] == '-' || str[ind] == '+') ind++;
        bool super = false;
        int tmp;
        int limit = INT_MAX / 10;
        for(; isdigit(str[ind]); ind++) {
            if(res > limit) {
                super = true;
                break;
            }
            res *= 10;
            tmp = str[ind] - '0';
            if( (res == limit * 10) && ( (tmp > 7 && sign == 1) || (tmp > 8 && sign == -1) ) ){
                super = true;
                break;
            }
            res += tmp;
        }
        if(super) {
            if(sign == 1) return INT_MAX;
            else return INT_MIN;
        }else return sign * res;
    }
};

//12ms 主要是coner cases的思考！！！把逻辑思路想清楚了，然后一条一条的找到相应的解决办法：空格、溢出、非法字符
class Solution {
public:
    int myAtoi(string str) {
        int len = str.size();
        if(!len) return 0;
        long long res = 0;
        bool negetive = false, isFirst = false;
        int i = 0;
        while(str[i] == ' ') i++;
        for(; i < len; i++) {
            if(str[i] >= '0' && str[i] <= '9') {
                res *= 10;
                res += str[i] - '0';
                isFirst = true;
                if(res > INT_MAX) {
                    if(negetive) return INT_MIN;
                    return INT_MAX;
                }
            }else if(str[i] == '-' && !isFirst) {
                negetive = true;
                isFirst = true;
            }else if(str[i] == '+' && !isFirst) {
                negetive = false;
                isFirst = true;
            }else {
                return negetive ? -res : res;
            }
        }
        return negetive ? -res : res;
    }
};