class Solution {
public:
    vector<int> findOrder(int numCourses, vector<pair<int, int> >& prerequisites) {
        int parNum = prerequisites.size();
        int *mark = new int[numCourses];
        memset(mark, 0, numCourses*sizeof(int));
        for(int i = 0; i < parNum; i++) {
            mark[prerequisites[i].first]++;
        }
        
        queue<int> q;
        vector<int> res;
        for(int i = 0; i < numCourses; i++) {
            if(!mark[i]) q.push(i);
        }
        int done = 0;
        while(!q.empty()) {
            int cour = q.front();
            res.push_back(cour);
            q.pop();
            done++;
            for(int i = 0; i < parNum; i++) {
                if(prerequisites[i].second == cour) {
                    mark[prerequisites[i].first]--;
                    if(mark[prerequisites[i].first] == 0) q.push(prerequisites[i].first);
                }
            }
        }
        vector<int> tmp;
        if(done == numCourses) return res;
        else return tmp;
    }
};

// S 864ms
class Solution {
public:
    vector<int> findOrder(int numCourses, vector<pair<int, int>>& prerequisites) {
        vector<int> res;
        if(prerequisites.empty()) {
            for(int i = 0; i < numCourses; i++) res.push_back(i); 
            return res;
        }
        unordered_map<int, int> count;
        unordered_map<int, vector<int>> childs;
        
        for(int i = 0; i < numCourses; i++) count[i] = 0;
        for(auto each : prerequisites) {
            count[each.first]++;
            childs[each.second].push_back(each.first);
        }
        
        bool found = false;
        while(res.size() < numCourses) {
            for(int i = 0; i < numCourses; i++) {// 可以用队列记录，这样就不用每次都找了
                if(count.count(i) > 0) {
                    if(count[i] == 0) {
                        found = true;
                        res.push_back(i);
                        count.erase(i);
                        for(int j = 0; j < childs[i].size(); j++) {
                            count[childs[i][j]]--;
                        }
                    }
                }
            }
            if(!found) { res.clear(); return res;}
            else found = false;
        }
        return res;
    }
};

//用队列改进拓扑排序后：508ms
class Solution {
public:
    vector<int> findOrder(int numCourses, vector<pair<int, int>>& prerequisites) {
        vector<int> res;
        if(prerequisites.empty()) {
            for(int i = 0; i < numCourses; i++) res.push_back(i); 
            return res;
        }
        unordered_map<int, int> count;
        unordered_map<int, vector<int>> childs;
        
        for(int i = 0; i < numCourses; i++) count[i] = 0;
        for(auto each : prerequisites) {
            count[each.first]++;
            childs[each.second].push_back(each.first);
        }
        
        queue<int> que;
        for(int i = 0; i < numCourses; i++) if(count[i] == 0) que.push(i);
        bool found = false;
        while(!que.empty()) {
            int i = que.front();
            que.pop();
            res.push_back(i);
            for(int j = 0; j < childs[i].size(); j++) {
                count[childs[i][j]]--;
                if(count[childs[i][j]] == 0) que.push(childs[i][j]);
            }
        }
        if(res.size() == numCourses) return res;
        res.clear();
        return res;
    }
};

//536ms ==> 改成unordered_map会成为516ms
class Solution {
public:
    vector<int> findOrder(int numCourses, vector<pair<int, int>>& pre) {
        vector<int> res;
        if(numCourses == 0) return res;
        
        map<int, vector<int>> post;
        map<int, int> req;
        
        int pairCnt = pre.size();
        for(int i = 0; i < pairCnt; i++) {
            post[pre[i].second].push_back(pre[i].first);
            req[pre[i].first]++;
        }
        
        queue<int> courses;
        
        for(int i = 0; i < numCourses; i++) {
            if(req[i] == 0) courses.push(i);
        }
        while(!courses.empty()) {
            int c = courses.front();
            courses.pop();
            res.push_back(c);
            int t = post[c].size();
            for(int i = 0; i < t; i++) {
                req[post[c][i]]--;
                if(req[post[c][i]] == 0) courses.push(post[c][i]);
            }
        }
        
        if(res.size() == numCourses) return res;
        else {
            res.clear();
            return res;
        }
    }
};