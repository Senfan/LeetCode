class Solution {
public:
    string addByBit(string s1, string s2) {
        int l1 = s1.size();
        int l2 = s2.size();
        string res = "";

        char x = '0';
        int t = 0;
        int sum = 0;

        int i, j;
        for(i = 0, j = 0; i < l1 && j < l2; i++, j++) {
            sum = s1[i] + s2[j] - 2 * '0' + t;
            x = sum % 10 + '0';
            res += x;
            t = sum / 10;
        }

        for(;i < l1; i++) {
            sum = t + s1[i] - '0';
            x = sum % 10 + '0';
            res += x;
            t = sum / 10;
        }
        for(;j < l2; j++) {
            sum = t + s2[j] - '0';
            x = sum % 10 + '0';
            res += x;
            t = sum / 10;
        }
        if(t != 0) {
            res += '1';
        }
        return res;
    }

    string mulByBit(string s, char c) {
        if(c == '0' || s == "0") return "0";
        string res = "";
        int product = 0;
        int mul = c - '0';
        int t = 0;
        char x = '0';

        int len = s.size();

        for(int i = len - 1; i >= 0; i--) {
            product = (s[i] - '0') * mul + t;
            t = product / 10;
            x = product % 10 + '0';
            res += x;
        }
        if(t != 0) {
            res += (t + '0');
        }

        return res;
    }

    string multiply(string num1, string num2) {
        if(num1 == "0" || num2 == "0") return "0";
        int len2 = num2.size();
        string res = "";
        string product = "";
        for(int i = len2 - 1; i >= 0; i--) {
            product = "";
            string pre(len2 - i - 1, '0');
            product += pre;

            string tmp = mulByBit(num1, num2[i]);
            product += tmp;

            res = addByBit(res, product);
        }
        reverse(res.begin(), res.end());
        return res;
    }
};


// R: 完全可以模拟手工计算的乘法计算！！！！！ 8ms
//两个数字相乘，不可能超过两个数字位数的和！！！

string multiply(string num1, string num2) {
    string sum(num1.size() + num2.size(), '0');

    for (int i = num1.size() - 1; 0 <= i; --i) {
        int carry = 0;
        for (int j = num2.size() - 1; 0 <= j; --j) {
            int tmp = (sum[i + j + 1] - '0') + (num1[i] - '0') * (num2[j] - '0') + carry;
            sum[i + j + 1] = tmp % 10 + '0';
            carry = tmp / 10;
        }
        sum[i] += carry;
    }

    size_t startpos = sum.find_first_not_of("0");
    if (string::npos != startpos) {
        return sum.substr(startpos);
    }
    return "0";
}


//S 20ms 太慢
class Solution {
public:
    string multiply(string num1, string num2) {

        int len1 = num1.size(), len2 = num2.size();

        if(len1 < len2) {
            swap(num1, num2);
            swap(len1, len2);
        }

        string sub = "", res = "";
        int tmp, tag;
        for(int i = len2-1; i >= 0; i--) {
            sub = string(len2 - 1 - i, '0');
            tag = 0;
            for(int j = len1 - 1; j >= 0; j--) {
                tmp = (num1[j] - '0') * (num2[i] - '0') + tag;
                tag = tmp / 10;
                sub += ((tmp % 10) + '0');
            }
            if(tag) sub += (tag + '0');
            res = add(res, sub);
        }
        reverse(res.begin(), res.end());
        int tLen = res.size();
        int i;
        for(i = 0; i < tLen && res[i] == '0'; i++);
        res.erase(0, i);
        return res.empty() ? "0" : res;
    }

    string add(string s1, string s2) {
        string res = "";
        int len1 = s1.size(), len2 = s2.size();

        int tmp = min(len1, len2);
        int tag = 0;
        int i;
        for(i = 0; i < tmp; i++) {
            int x = (s1[i] + s2[i] - '0' - '0' + tag);
            res += (x % 10) + '0';
            tag = x / 10;
        }

        if(i < len1) {
            for(; i < len1; i++) {
                int x = (s1[i] - '0' + tag);
                res += (x % 10) + '0';
                tag = x / 10;
            }
        }
        if(i < len2) {
            for(; i < len2; i++) {
                int x = (s2[i] - '0' + tag);
                res += (x % 10) + '0';
                tag = x / 10;
            }
        }

        if(tag) res += '1';
        return res;
    }
};