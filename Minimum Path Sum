//DFS TLE

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int linB = grid.size() - 1;
        int colB = grid[0].size() - 1;

        int res = 10000;
        dfs(grid, res, 0, 0, 0, linB, colB);
        return res;
    }

    void dfs(vector<vector<int>> &grid, int &res, int line, int col, int curSum, int linB, int colB) {
        if(line > linB || col > colB || curSum > res) return;
        if(line == linB && col == colB) {
            curSum += grid[line][col];
            res = min(res, curSum);
            return;
        }
        curSum += grid[line][col];
        dfs(grid, res, line+1, col, curSum, linB, colB);
        dfs(grid, res, line, col+1, curSum, linB, colB);
    }
};


//DP Accepted

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int lines = grid.size();
        int cols = grid[0].size();

        vector<int> dp(cols);
        dp[0] = grid[0][0];
        for(int i = 1; i < cols; i++) {
        	dp[i] = grid[0][i] + dp[i-1];
        }

        for(int i = 1; i < lines; i++) {
        	dp[0] += grid[i][0];
        	for(int j = 1; j < cols; j++) {
        		dp[j] = min(dp[j-1], dp[j]) + grid[i][j];
        	}
        }

        return dp[cols-1];
    }
};
