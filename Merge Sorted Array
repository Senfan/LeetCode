// too slowly 最原始的想法了吧！
class Solution {
public:
    void merge(int A[], int m, int B[], int n) {
        int curA = 0, curB = 0;
        int C[m+n];
        int curC = 0;
        for(; curA < m && curB < n; ) {
            if(A[curA] > B[curB]) {
                C[curC] = B[curB];
                curB++;
            }else {
                C[curC] = A[curA];
                curA++;
            }
            curC++;
        }
        
        while(curA < m) {
            C[curC] = A[curA];
            curC++;
            curA++;
        }
        while(curB < n) {
            C[curC] = B[curB];
            curC++;
            curB++;
        }
        
        for(int i = 0; i < m + n; i++) {
            A[i] = C[i];
        }
    }
};

//4ms 记得找到问题的症结，然后去处理该症结；如果该症结处理不了，试着从其他角度考虑问题，找到新的症结视角！
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int curInd = m + n;
        int cur1 = m - 1, cur2 = n - 1;
        while(cur1 >= 0 && cur2 >= 0) {
            if(nums1[cur1] > nums2[cur2]) {
                nums1[--curInd] = nums1[cur1--];
            }else {
                nums1[--curInd] = nums2[cur2--];
            }
        }
        while(cur1 >= 0) nums1[--curInd] = nums1[cur1--];
        while(cur2 >= 0) nums1[--curInd] = nums2[cur2--];
    }
};