class Solution {
public:

    void dfs(vector<vector<int> > &ans, vector<int> &num, int target, vector<int> &tmp, int start, int last) {
        if(!target) {
            if(!tmp.empty())
                ans.push_back(tmp);
            return;
        }    
        
        if(start > last || target < num[start]) return;
        
        tmp.push_back(num[start]);
        dfs(ans, num, target-num[start], tmp, start+1, last);
        tmp.pop_back();
        dfs(ans, num, target, tmp, start+1, last);
    }
    
    vector<vector<int> > combinationSum2(vector<int> &num, int target) {
        sort(num.begin(), num.end());
        vector<vector<int> > ans;
        vector<int> tmp;
        dfs(ans, num, target, tmp, 0, num.size() - 1);
        if(ans.empty()) return ans;
        vector<int> pre = ans[0];
        sort(ans.begin(), ans.end());
        vector<vector<int> > result;
        result.push_back(pre);
        for(int i = 1; i < ans.size(); i++) {
            if(ans[i] != pre) {
                result.push_back(ans[i]);
                pre = ans[i];
            }
        }
        return result;
    }
};

// R 20ms
//典型的子集生成模型：增量构造法; 子集生成可以有三种思路，但是增量构造法，可以从位置的角度考虑建模，进而可以避免由于重复元素引起的子集重复！！！一定要理解模型的含义，这样才可以灵活运用，可以从多个不同角度，但是每一角度，都要搞清楚其模型基础含义！！
class Solution {
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<vector<int>> res;
        vector<int> sub;
        if(candidates.empty()) return res;
        sort(candidates.begin(), candidates.end());
        
        backTrack(candidates, res, sub, 0,target);
        return res;
    }
    
    void backTrack(vector<int> &V, vector<vector<int>> &res, vector<int> &sub, int curNum, int target) {
        if(!target) {
            res.push_back(sub);
        }else if(target > 0) {
            for(int i = curNum; i < V.size(); i++) {
                sub.push_back(V[i]);
                backTrack(V, res, sub, i+1, target - V[i]);
                sub.pop_back();
                while(i+1 != V.size() && V[i+1] == V[i]) i++;
            }
        }
    }
    
};