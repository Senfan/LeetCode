class Solution {
public:
    int numDecodings(string s) {
        if(s.empty()) return 0;
        
        int size = s.size();
        vector<int> dp(size, 0);
        if(s[0] != '0') dp[0] = 1;
        else return 0;
        for(int i = 1; i < size; i++) {
            if(s[i] - '0' == 0) {
                if( (s[i-1] - '0')  && (s[i-1] - '0') * 10 < 26) {
                    if(i-2 >= 0) dp[i] = dp[i-2];
                    else dp[i] = 1;
                }
                else return 0;
            }else {
                dp[i] = dp[i-1];
                if(s[i-1] - '0' && ((s[i-1] - '0') * 10 + s[i] - '0') < 27) {
                    if(i-2 >= 0)
                        dp[i] += dp[i-2];
                    else dp[i] += 1;
                }
            }
        }
        return dp[size-1];
    }
};

//S: 递归 TLE
class Solution {
public:
    int numDecodings(string s) {
        if(!s.empty()) {
            int first = 0, second = 0;
            if(s[0] > '0') {
                first = numDecodings(s.substr(1));
            }
            if(s.size() > 1 && ((s[0] - '0') * 10 + s[1] - '0') < 27) {
                second = numDecodings(s.substr(2));
            }
            return first + second;
        }else {
            return 1;
        }
    }
};

// S : 4ms
class Solution {
public:
    int numDecodings(string s) {
        int len = s.size();
        if(len == 0) return 0;
        vector<int> dp(len+1, 0);
        dp[0] = 1;
        if(s[0] > '0') dp[1] = 1;

        for(int i = 1; i < len; i++) {
            if(s[i] > '0') dp[i+1] = dp[i];
            if(s[i-1] != '0' && (s[i-1] - '0') * 10 + s[i] - '0' < 27) dp[i+1] += dp[i-1];
        }

        return dp[len];
    }
};