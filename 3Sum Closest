O(n^2) 20ms
class Solution {
public:
    int threeSumClosest(vector<int> &num, int target) {
        
        int a, low, high, res = INT_MAX ,temp = INT_MAX;
        sort(num.begin(), num.end());
        
        for(a = 0; a < num.size(); a++) {
            low = a + 1;
            high = num.size() - 1;
            
            while(low < high) {
                int sum = num[a] + num[low] + num[high];
                if(abs(sum - target) < temp) {
                    if(abs(sum - target) == 0) return target;
                    res = sum;
                    temp = abs(sum - target);
                }
                
                if(sum > target) {
                    high--;
                }else {
                    low++;
                }
            }
        }
        return res;
    }
};

// S :14ms
class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        if(nums.empty()) return 0;
        int nLen = nums.size();
        sort(nums.begin(), nums.end());
        int res, minDif = INT_MAX;
        
        for(int i = 0; i < nLen; i++) {
            int l = i + 1, r = nLen - 1, sum;
            while(l < r) {
                sum = nums[i] + nums[l] + nums[r];
                if(sum == target) return target;
                if(abs(sum - target) < minDif) {
                    minDif = abs(sum - target);
                    res = sum;
                }
                if(sum > target) r--;
                else l++;
            }
        }
        return res;
    }
};