class Solution {
public:
    int minCut(string s) {
        int len = s.size();
        vector<int> dp(len+1);
        
        for(int i = 0; i <= len; i++) dp[i] = i - 1;// first K elements
        
        for(int pivot = 0; pivot < len; pivot++) {
            for(int j = 0; pivot - j >= 0 && pivot + j < len && s[pivot - j] == s[pivot + j]; j++) 
                dp[pivot+j+1] = min(dp[pivot -j] + 1, dp[pivot+j+1]);
            for(int j = 0; pivot - j >= 0 && pivot + 1 + j < len && s[pivot - j] == s[pivot + 1 + j]; j++)
                dp[pivot+2+j] = min(dp[pivot+j+2], dp[pivot-j] + 1);
        }
        
        return dp[len];
    }
};

//动态规划O(n^2) TLE 思路其实是一样的，但是之前的优化在哪里呢？就是因为用中间轴？！而不是单个枚举所有可能的回文, 避免了不是回文的所有情况，而只是取是回文的情况！
class Solution {
public:
    int minCut(string s) {
        if(s.empty()) return 0;
        int sLen = s.size();
        
        vector<int> dp(sLen+1, INT_MAX);
        dp[0] = 0;
        for(int i = 1; i <= sLen; i++) {

            for(int j = 0; j < i; j++) {
                if(dp[j] != INT_MAX && isPalind(s.substr(j, i - j))) dp[i] = min(dp[i], dp[j] + 1);
            }
        }
        return dp[sLen] - 1;
    }
    
    bool isPalind(string s) {
        int right = s.size() - 1, left = 0;
        while(left <= right) {
            if(s[left] != s[right]) break;
            left++, right--;
        }
        if(left > right) return true;
        return false;
    }
};