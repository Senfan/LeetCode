TLE same idea, but can't understand

class Solution {
private:

    vector<int> stackPath;
    vector<vector<int>> res;
    int curSum = 0;
    int top = 0;

public:
    
    
    vector<vector<int> > pathSum(TreeNode *root, int sum) {
       
        if(root == NULL) return res;
        
        curSum += root -> val;
        stackPath.push_back(root -> val);
        if(curSum == sum && root -> left == NULL && root -> right == NULL) {
            res.push_back(stackPath);
        }
    
        
        pathSum(root -> left, sum);
        
        pathSum(root -> right, sum);
        
        curSum -= root -> val;
        stackPath.pop_back();
        
        return res;
    }
};


18ms
class Solution {
private:

    vector<int> stackPath;
    vector<vector<int>> res;
    int curSum = 0;
    int top = 0;

public:
    
    void dfs(vector<vector<int>> &result, int target, int curSum, TreeNode *root, vector<int> &stackPath) {
         if(root == NULL) return;
        
        curSum += root -> val;
        stackPath.push_back(root -> val);
        if(curSum == target && root -> left == NULL && root -> right == NULL) {
            res.push_back(stackPath);
        }
    
        
        dfs(result, target, curSum, root -> left, stackPath);
        
        dfs(result, target, curSum, root -> right, stackPath);
        
        curSum -= root -> val;
        stackPath.pop_back();
    }
    
    vector<vector<int> > pathSum(TreeNode *root, int sum) {
       
        dfs(res, sum, 0, root, stackPath);
        
        return res;
    }
};

//S 12ms
class Solution {
public:
    vector<vector<int>> pathSum(TreeNode* root, int sum) {
        vector<vector<int>> res;
        if(root == NULL) return res;
        vector<int> tmp;
        preOrder(res, root, 0, sum, tmp);
        return res;
    }
    
    void preOrder(vector<vector<int>> &res, TreeNode* root, int curSum, int &sum, vector<int> &tmp) {
        if(root -> left == NULL && root -> right == NULL) {
            if(curSum + root -> val == sum) {tmp.push_back(root -> val); res.push_back(tmp); tmp.pop_back();}
            return;
        }
        
        tmp.push_back(root -> val);
        if(root -> left) {
            preOrder(res, root -> left, curSum + root -> val, sum, tmp);
        }
        if(root -> right) {
            preOrder(res, root -> right, curSum + root -> val, sum, tmp);
        }
        tmp.pop_back();
    }
};


//16ms 
class Solution {
public:
    vector<vector<int>> pathSum(TreeNode* root, int sum) {
        vector<vector<int>> res;
        if(root == NULL) return res;
        vector<int> tmp;
        backTrack(root, sum, res, tmp);
        return res;
    }
    
    void backTrack(TreeNode* root, int sum, vector<vector<int>> &res, vector<int> &tmp) {
        if(root -> left == NULL && root -> right == NULL) {
            if(sum == root -> val) {
                tmp.push_back(sum);
                res.push_back(tmp);
                tmp.pop_back();
                return;
            }else return;
        }else {
            tmp.push_back(root -> val);
            if(root -> left) {
                backTrack(root -> left, sum - root -> val, res, tmp);
            }
            if(root -> right) {
                backTrack(root -> right, sum - root -> val, res, tmp);
            }
            tmp.pop_back();
        }
    }
};


//12ms ==> if else语句比较耗时间！
class Solution {
public:
    vector<vector<int>> pathSum(TreeNode* root, int sum) {
        vector<vector<int>> res;
        if(root == NULL) return res;
        vector<int> tmp;
        backTrack(root, sum, res, tmp);
        return res;
    }
    
    void backTrack(TreeNode* root, int sum, vector<vector<int>> &res, vector<int> &tmp) {
        if(root -> left == NULL && root -> right == NULL) {
            if(sum == root -> val) {
                tmp.push_back(sum);
                res.push_back(tmp);
                tmp.pop_back();
            }
            return;
        }
        tmp.push_back(root -> val);
        if(root -> left) {
            backTrack(root -> left, sum - root -> val, res, tmp);
        }
        if(root -> right) {
            backTrack(root -> right, sum - root -> val, res, tmp);
        }
        tmp.pop_back();
    }
};