class Solution {
public:
    void inOrder(TreeNode *root, TreeNode *&leftOne, TreeNode *&rightOne) {
        if(root == NULL || (root -> left == NULL && root -> right == NULL)) return;

        inOrder(root -> left, leftOne, rightOne);
        if(root -> left && root -> left -> val > root -> val) {
            leftOne = root;
            return;
        }
        if(root -> right && root -> right -> val < root -> val) {
            rightOne = root;
            return;
        }
        inOrder(root -> right, leftOne, rightOne);
    }
    void recoverTree(TreeNode *root) {
        TreeNode *leftOne = NULL, *rightOne = NULL, *tmp = NULL;
        inOrder(root, leftOne, rightOne);

        if(!leftOne) {
            swap(rightOne -> val, rightOne -> right -> val);
        }else if(!rightOne) {
            swap(leftOne -> val, leftOne -> left -> val);
        }else {
            swap(leftOne -> left -> val, rightOne -> right -> val);
        }
    }
};