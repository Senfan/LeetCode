//可以看成一个一维数组，整体进行讨论
class Solution {
public:
    bool searchMatrix(vector<vector<int> > &matrix, int target) {
        if(matrix.size() == 0) return false;
        int row = matrix.size();
        int colu = matrix[0].size();
        int last = row * colu - 1;
        int low = 0;
        int mid;

        int r, c;
        while(last >= low) {
            mid = (last + low) >> 1;
            r = mid / colu;
            if((mid + 1) % colu == 0) c = colu - 1;
            else c = (mid + 1) % colu - 1;
            if(matrix[r][c] == target)
                return true;
            if(matrix[r][c] > target) last = mid - 1;
            else low = mid + 1;
        }
        return false;
    }
};


//O(m) + log(n) 12ms
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int m = matrix.size();
        for(int i = 0; i < m - 1; i++) {
            if(target >= matrix[i][0] && target < matrix[i+1][0]) {
                return binarySearch(i, matrix, target);
            }
        }
        return binarySearch(m-1, matrix, target);
    }
    
    bool binarySearch(int col, vector<vector<int>> matrix, int target) {
        int left = 0, right = matrix[col].size() - 1;
        
        while(left <= right) {
            int mid = left + (right - left) / 2;
            if(matrix[col][mid] == target) return true;
            if(matrix[col][mid] > target) right = mid - 1;
            else left = mid + 1;
        }
        return false;
    }
};