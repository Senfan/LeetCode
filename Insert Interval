//java 为了出题而出题的难题 => 为了完成而完成（copy)

/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public List<Interval> insert(List<Interval> intervals, Interval newInterval) {
    List<Interval> result = new LinkedList<>();
    int i = 0;
    // add all the intervals ending before newInterval starts
    while (i < intervals.size() && intervals.get(i).end < newInterval.start)
        result.add(intervals.get(i++));
    // merge all overlapping intervals to one considering newInterval
    while (i < intervals.size() && intervals.get(i).start <= newInterval.end) {
        newInterval = new Interval( // we could mutate newInterval here also
                Math.min(newInterval.start, intervals.get(i).start),
                Math.max(newInterval.end, intervals.get(i).end));
        i++;
    }
    result.add(newInterval); // add the union of intervals we got
    // add all the rest
    while (i < intervals.size()) result.add(intervals.get(i++)); 
    return result;
}
}

//self :596ms 二分查找找插入点，然后合并
class Solution {
public:
    vector<Interval> insert(vector<Interval>& intervals, Interval newInterval) {
        vector<Interval> res;
        if(intervals.empty()) {
            res.push_back(newInterval);
            return res;
        }

        int intNum = intervals.size();
        if(intNum == 1) {
            if(newInterval.start > intervals[0].end) {
                res.push_back(intervals[0]);
                res.push_back(newInterval);
                return res;
            }else if(newInterval.end < intervals[0].start) {
                res.push_back(newInterval);
                res.push_back(intervals[0]);
                return res;
            }else {
                newInterval.start = min(newInterval.start, intervals[0].start);
                newInterval.end = max(newInterval.end, intervals[0].end);
                res.push_back(newInterval);
                return res;
            }
        }
        int l = 0, r = intNum - 1, mid, insertPos = -1;
        if(newInterval.start <= intervals[0].start) insertPos = 0;
        if(newInterval.start > intervals[intNum-1].end) insertPos = intNum;

        while(insertPos == -1 &&  l < r - 1) {
            mid = l + ((r - l) >> 1);
            if(newInterval.start == intervals[mid].start) {
                insertPos = mid;
            }else if(newInterval.start < intervals[mid].start){
                r = mid;
            }else {
                l = mid;
            }
        }

        if(insertPos == -1) { //not found the pos
            mid = l + ((r - l) >> 1);
            if(newInterval.start == intervals[mid].start) {
                insertPos = mid;
            }else if(newInterval.start < intervals[mid].start){
                insertPos = mid;
            }else {
                insertPos = r;
            }
        }

        l = insertPos - 1;
        if(insertPos > 0 && intervals[insertPos - 1].end >= newInterval.start) {
            l = insertPos - 2;
            newInterval.start = intervals[insertPos - 1].start;
            newInterval.end = max(intervals[insertPos - 1].end, newInterval.end);
        }else if(insertPos == 0) {
            l = -1;
        }

        int i;
        for(i = insertPos; i < intNum; i++) {
            if(intervals[i].start <= newInterval.end) {
                newInterval.end = max(newInterval.end, intervals[i].end);
                newInterval.start = min(newInterval.start, intervals[i].start);
            }else {
                r = i;
                break;
            }
        }
        if( i == intNum) r = intNum;

        for(int i = 0; i <= l; i++) {
            res.push_back(intervals[i]);
        }
        res.push_back(newInterval);
        for(int i = r; i < intNum; i++) {
            res.push_back(intervals[i]);
        }
        return res;
    }
};