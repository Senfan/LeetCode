//回溯法：回溯法往往用来解决动态决策问题，整个过程可以用一颗解答树来描述，每做出一个决策就是在该节点上构造孩子节点
//而往往就是在递归函数中用cur来标记当前的决策层次，也就是解答树到达的地方，直到底层产生一个解答为止
//排列问题的唯一影响因素就是元素的位置，不同的元素放到不同的位置就可以产生一个排列，所以，我们可以把位置固定下来，然后遍历元素，这样就把二维问题变成一维子问题，从而用递归求解子问题，构造正特问题的解答！！
//回溯是一个边构造边检查的过程，在curInd时候，之前的已经构造好了，就下来就是构造当前位置的元素

//深刻理解排列的构造模型！！
class Solution {
public:
    void recFun(vector<vector<int> > &res, vector<int> &nums, int curInd) {
        if(curInd == nums.size()) {res.push_back(nums); return;}
        unordered_set<int> set;
        for(int i = curInd; i < nums.size(); i++) {
            if(set.find(nums[i]) == set.end()) {
                set.insert(nums[i]);
                swap(nums[i], nums[curInd]);
                recFun(res, nums, curInd+1);
                swap(nums[i], nums[curInd]);
            }
        }
        
    }
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        vector<vector<int> > res;
        if(nums.empty()) return res;
        recFun(res, nums, 0);
        return res;
    }
};

//非回溯法：sort + DFS :处置元素法建模
class Solution {
public:
    void recursion(vector<int> num, int i, int j, vector<vector<int> > &res) {
        if (i == j-1) {
            res.push_back(num);
            return;
        }
        for (int k = i; k < j; k++) {
            if (i != k && num[i] == num[k]) continue;
            swap(num[i], num[k]);
            recursion(num, i+1, j, res);
        }
    }
    vector<vector<int> > permuteUnique(vector<int> &num) {
        sort(num.begin(), num.end());
        vector<vector<int> >res;
        recursion(num, 0, num.size(), res);
        return res;
    }
};