class Solution {
public:
    int maxArea(vector<int>& height) {
        int r = height.size() - 1, l = 0;
        int res = 0, tmpL, tmpR;
        while(l < r) {
            res = max(res, min(height[l], height[r]) * (r - l));
            if(height[l] <= height[r]) {
            	tmpL = height[l++];
            	while(l < r && height[l] <= tmpL) l++;
            }else {
            	tmpR = height[r--];
            	while(l < r && height[r] <= tmpR) r--;
            }
        }
        return res;
    }
};

// S 24ms
class Solution {
public:
    int maxArea(vector<int>& height) {
        int size = height.size();
        if(size < 2) return 0;
        
        int l = 0, r = size - 1, w;
        int res = 0, area, tem;
        
        while(l < r) {
            w = r - l;
            area = min(height[l], height[r]) * w;
            res = max(res, area);
            if (height[l] <= height[r]) {
                tem = height[l];
                while(height[++l] <= tem);
            }else {
                tem = height[r];
                while(height[--r] <= tem);
            }
        }
        return res;
    }
};

// 40ms
class Solution {
public:
    int maxArea(vector<int>& height) {
        int len = height.size();
        if(len < 2) return 0;
        
        int left = 0, right = len - 1;
        int res = INT_MIN, tmp;
        while(left < right) {
            res = max(res, (right - left) * min(height[left], height[right]));
            if(height[left] >= height[right]) {
                tmp = height[right--];
                while(left < right && height[right] <= tmp) right--;
            }else {
                tmp = height[left++];
                while(left < right && height[left] <= tmp) left++;
            }
        }
        return res;
    }
};