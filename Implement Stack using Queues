class Stack {
private:
    queue<int> qA, qB;
public:
    // Push element x onto stack.
    void push(int x) {
        if(!qA.empty()) qA.push(x);
        else qB.push(x);
    }

    // Removes the element on top of the stack.
    void pop() {
        int size;
        if(qA.empty()) {
            size = qB.size();
            for(int i = 0; i < size - 1; i++) {
                qA.push(qB.front());
                qB.pop();
            }
            qB.pop();
        }else {
            size = qA.size();
            for(int i = 0; i < size - 1; i++) {
                qB.push(qA.front());
                qA.pop();
            }
            qA.pop();
        }
    }

    // Get the top element.
    int top() {
        int size;
        if(qA.empty()) {
            size = qB.size();
            for(int i = 0; i < size - 1; i++) {
                qA.push(qB.front());
                qB.pop();
            }
            int res = qB.front();
            qA.push(res);
            qB.pop();
            return res;
        }else {
            size = qA.size();
            for(int i = 0; i < size - 1; i++) {
                qB.push(qA.front());
                qA.pop();
            }
            int res = qA.front();
            qB.push(res);
            qA.pop();
            return res;
        }
    }

    // Return whether the stack is empty.
    bool empty() {
        return qA.empty() && qB.empty();
    }
};

//2015年7月20日15:59:52
//0oms
class Queue {
private:
    stack<int> stkA, stkB;
public:
    // Push element x to the back of queue.
    void push(int x) {
        stkB.push(x);
    }

    // Removes the element from in front of queue.
    void pop(void) {
        if(stkA.empty()) {
            int x;
            while(!stkB.empty()) {
                x = stkB.top();
                stkA.push(x);
                stkB.pop();
            }
        }
        stkA.pop();
    }

    // Get the front element.
    int peek(void) {
        if(stkA.empty()) {
            int x;
            while(!stkB.empty()) {
                x = stkB.top();
                stkA.push(x);
                stkB.pop();
            }
        }
        return stkA.top();
    }

    // Return whether the queue is empty.
    bool empty(void) {
        return (stkA.empty() && stkB.empty());
    }
};