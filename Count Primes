class Solution {
public:
    int countPrimes(int n) {
        if(n <= 2) return 0;
        int res = 1;
        vector<bool> passed(n, false);
        int upper = sqrt(n);
        for(int i = 3; i < n; i += 2) {
            if(!passed[i]) {
                res++;
                if(i > upper) continue;
                for(int j = i * i; j < n; j += i)
                    passed[j] = true;
            } 
        }
        return res;
    }
};

//素数筛选法 108ms
class Solution {
public:
    int countPrimes(int n) {
        vector<int> nums(n+1, 1);
        int prime = 2, count = 0;
        
        while(prime <= sqrt(n)) {
            for(int i = prime * prime; i < nums.size(); i += prime) nums[i] = 0;
            
            prime = prime + 1;
            while(prime < nums.size() && nums[prime] == 0) prime++;
            
            if(prime >= nums.size()) break;
        }
        
        for(int i = 2; i < n; i++) if(nums[i] == 1) count++;
        return count;
    }
};