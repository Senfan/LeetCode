/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        if(head == NULL) return NULL;
        
        ListNode *pre = new ListNode(-1), *cur = head -> next, *curS = head, *head2 = pre;
        pre -> next = head;
        bool isUniq = true;
        while(cur) {
            if(curS -> val != cur -> val) {
                if(isUniq) {
                    pre = curS;
                }else {
                    pre -> next = cur;
                    isUniq = true;
                }
                curS = cur;
                cur = cur -> next;
            }else {
                isUniq = false;
                cur = cur -> next;
                if(cur == NULL) {
                    pre -> next = NULL;
                }
            }
        }
        return head2 -> next;
    }
};

// S 8ms
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        if(head == NULL || head -> next == NULL) return head;
        ListNode *iniNode = new ListNode(0);
        
        iniNode -> next = head;
        ListNode *preNode = iniNode, *curNode = head -> next;
        while(curNode) {
            if(curNode -> val == preNode -> next -> val) {
                curNode = curNode -> next;
                while(curNode && curNode -> val == preNode -> next -> val) curNode = curNode -> next;
                preNode -> next = curNode;
                if(curNode == NULL) break;
                else curNode = curNode -> next;
            }else {
                preNode = preNode -> next;
                curNode = curNode -> next;
            }
        }
        
        head = iniNode -> next;
        delete iniNode;
        return head;
    }
};

// S 12ms
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        if(head == NULL || head -> next == NULL) return head;
        ListNode *iniNode = new ListNode(0);
        iniNode -> next = head;
        
        ListNode *pre = iniNode, *start = head, *cur = head -> next;
        
        while(cur) {
            if(cur -> val == start -> val) {
                cur = cur -> next;
            }else if(start -> next == cur){
                pre = start;
                start = cur;
                cur = cur -> next;
            }else {
                pre -> next = cur;
                start = cur;
                cur = cur -> next;
            }
        }
        if(start -> next != NULL) {
            pre -> next = NULL;
        } 
        head = iniNode -> next;
        delete iniNode;
        return head;
    }
};