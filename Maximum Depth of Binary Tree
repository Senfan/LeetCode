/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:

    void dfs(TreeNode *root, int height, int &res) {
        if(root == NULL) return;
        
        height++;
        if(res < height) res = height;
        if(root -> left) {
            dfs(root -> left, height, res);
        }
        if(root -> right) {
            dfs(root -> right, height, res);
        }
    }
    int maxDepth(TreeNode *root) {
        if(root == NULL) return 0;
        
        int res = 0, height = 0;
        
        dfs(root, height, res);
        
        return res;
    }
};


//8ms
class Solution {
public:
    int maxDepth(TreeNode* root) {
        if(root == NULL) return 0;
        int res = INT_MIN;
        helper(root, res, 1);
        return res;
    }
    
    void helper(TreeNode *root, int &res, int high) {
        if(root -> left == NULL && root -> right == NULL) res = res < high ? high : res;
        
        if(root -> left) helper(root -> left, res, high+1);
        if(root -> right) helper(root -> right, res, high+1);
    }
};