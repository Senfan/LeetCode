class Solution {
public:
    void solve(vector<vector<char>> &board) {
        int lines = board.size();
        if(lines == 0) return;
        int cols = board[0].size();
        if(cols == 0) return;

        queue<pair<int, int>> que;

        for(int i = 0; i < cols; i++) {
            if(board[0][i] == 'O') {que.push({0, i}), board[0][i] = 'A';}
            if(board[lines-1][i] == 'O') {que.push({lines-1, i}), board[lines-1][i] = 'A';}
        }

        for(int i = 1; i < lines - 1; i++) {
            if(board[i][0] == 'O') {que.push({i, 0}), board[i][0] = 'A';}
            if(board[i][cols-1] == 'O') {que.push({i, cols-1}), board[i][cols-1] = 'A';}
        }

        while(!que.empty()) {
            int line = que.front().first;
            int col = que.front().second;
            que.pop();

            //up
            if(line - 1 >= 0 && board[line-1][col] == 'O') {que.push({line-1, col}), board[line-1][col] = 'A';}
            //down
            if(line + 1 < lines && board[line+1][col] == 'O') {que.push({line+1, col}), board[line+1][col] = 'A';}
            //left 
            if(col - 1 >= 0 && board[line][col-1] == 'O') {que.push({line, col-1}), board[line][col-1] = 'A';}
            //right 
            if(col + 1 < cols && board[line][col+1] == 'O') {que.push({line, col+1}), board[line][col+1] = 'A';}

        }

        for(int i = 0; i < lines; i++)
            for(int j = 0; j < cols; j++) {
                if(board[i][j] == 'A') {
                    board[i][j] = 'O';
                }else if(board[i][j] == 'O') {
                    board[i][j] = 'X';
                }
            }
    }
};


// S : DFS RE 可能是栈溢出？！
class Solution {
public:
    void solve(vector<vector<char>>& board) {
        if(board.empty()) return;
        int lines = board.size(), cols = board[0].size();
        for(int i = 0; i < lines; i++) {
            if(board[i][0] == 'O') dfs(board, i, 0, lines, cols);
            if(board[i][cols - 1] == 'O') dfs(board, i, cols - 1, lines, cols);
        }
        
        for(int i = 1; i < cols - 1; i++) {
            if(board[0][i] == 'O') dfs(board, 0, i, lines, cols);
            if(board[lines-1][i] == 'O') dfs(board, lines-1, i, lines, cols);
        }
        
        for(int i = 0; i < lines; i++) 
            for(int j = 0; j < cols; j++) {
                if(board[i][j] == '#') board[i][j] = 'O';
                else if(board[i][j] == 'O') board[i][j] = 'X';
            }
    }
    
    void dfs(vector<vector<char>> &board, int curLine, int curCol, int lines, int cols) {
        if(curCol < 0 || curCol == cols || curLine < 0 || curLine == lines || board[curLine][curCol] != 'O') return;
        
        board[curLine][curCol] = '#';
        dfs(board, curLine - 1, curCol, lines, cols);
        dfs(board, curLine + 1, curCol, lines, cols);
        dfs(board, curLine, curCol - 1, lines, cols);
        dfs(board, curLine, curCol + 1, lines, cols);
    }
};