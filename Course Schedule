class Solution {
public:
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        int parNum = prerequisites.size();
        int *mark = new int[numCourses];
        memset(mark, 0, numCourses*sizeof(int));
        for(int i = 0; i < parNum; i++) {
            mark[prerequisites[i][1]]++;
        }
        
        queue<int> q;
        for(int i = 0; i < numCourses; i++) {
            if(!mark[i]) q.push(i);
        }
        int done = 0;
        while(!q.empty()) {
            int cour = q.front();
            q.pop();
            done++;
            for(int i = 0; i < parNum; i++) {
                if(prerequisites[i][0] == cour) {
                    mark[prerequisites[i][1]]--;
                    if(mark[prerequisites[i][1]] == 0) q.push(prerequisites[i][1]);
                }
            }
        }
        return done == numCourses;
    }
};

//280ms
class Solution {
public:
    bool canFinish(int numCourses, vector<pair<int, int>>& pre) {
        if(numCourses < 2) return true;
        unordered_map<int, int> count;
        unordered_map<int, vector<int>> post;
        
        for(int i = 0; i < pre.size(); i++) {
            count[pre[i].first]++;
            post[pre[i].second].push_back(pre[i].first);
        }
        
        queue<int> que;
        for(int i = 0; i < numCourses; i++)
            if(count[i] == 0) que.push(i);
        
        int cnt = 0;
        while(!que.empty()) {
            int course = que.front();
            que.pop();
            cnt++;
            for(int i = 0; i < post[course].size(); i++) {
                count[post[course][i]]--;
                if(count[post[course][i]] == 0) que.push(post[course][i]);
            }
        }
        return cnt == numCourses;
    }
};