//TLE
class Solution {
public:
    bool dfs(vector<vector<char> > &board, string target, int l, int c, int lineNum, int colNum) {
        if(target.size() == 1 && target[0] == board[l][c]) return true;
        if(l > 0 && board[l-1][c] == target[1] && dfs(board, target.substr(1), l-1, c, lineNum, colNum) ) return true;
        if(l < lineNum - 1 && board[l+1][c] == target[1] && dfs(board, target.substr(1), l+1, c, lineNum, colNum)) return true;
        if(c > 0 && board[l][c-1] == target[1] && dfs(board, target.substr(1), l, c-1, lineNum, colNum) ) return true;
        if(c < colNum - 1 && board[l][c+1] == target[1] && dfs(board, target.substr(1), l, c+1, lineNum, colNum) ) return true;
        return false;
    }
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        vector<string> res;
        int wordNum = words.size();
        int lineNum = board.size(), colNum = board[0].size();
        for(int i = 0; i < wordNum; i++) { //each word
            bool found = false;
            for(int l = 0; !found && l < lineNum; l++) {
                for(int c = 0; !found && c < colNum; c++) {
                    if(board[l][c] == words[i][0] && dfs(board, words[i], l,c, lineNum, colNum)) {
                        res.push_back(words[i]);
                        found = true;
                    }
                }
            }
        }
        return res;
    }
};

// 64ms 经典字典树问题

struct TrieNode {
    TrieNode *childs[26];
    char ch;
    int ind;
    bool isLeaf;
    TrieNode() : ch(0), ind(-1), isLeaf(0) {
        fill_n(childs, 26, nullptr);
    }
    TrieNode(char c) : ch(c), ind(-1), isLeaf(0) {
        fill_n(childs, 26, nullptr);
    }
};

class Solution {
    TrieNode *root;
public:
    Solution() {
        root = new TrieNode();
    }
    
    void insert(string word, int ind) {
        int len = word.size();
        TrieNode *curNode = root;
        for(int i = 0; i < len; i++) {
            if(curNode -> childs[word[i]-'a'] == NULL) {
                TrieNode *tmpNode = new TrieNode(word[i]);
                curNode -> childs[word[i]-'a'] = tmpNode;
                curNode = curNode -> childs[word[i] - 'a'];
                tmpNode = NULL;
            }else {
                curNode = curNode -> childs[word[i] - 'a'];
            }
        }
        curNode -> ind = ind;
        curNode -> isLeaf = true;
    }
    
    void dfs(vector<vector<char> > &board, int l, int c, int lineNum, int colNum, TrieNode *curNode, vector<string> &res, vector<string> &words) {
        if(curNode -> isLeaf) {res.push_back(words[curNode->ind]); curNode -> isLeaf = false;}
        //up
        if(l - 1 >= 0 && board[l-1][c] != '-') {
            int curInd = board[l-1][c] - 'a';
            if(curNode -> childs[curInd] != NULL) {
                board[l-1][c] = '-';
                dfs(board, l-1, c, lineNum, colNum, curNode -> childs[curInd], res, words);
                board[l-1][c] = 'a' + curInd;
            }
        }
        //down
        if(l + 1 < lineNum && board[l+1][c] != '-') {
            int curInd = board[l+1][c] - 'a';
            if(curNode -> childs[curInd] != NULL) {
                board[l+1][c] = '-';
                dfs(board, l+1, c, lineNum, colNum, curNode -> childs[curInd], res, words);
                board[l+1][c] = 'a' + curInd;
            }
        }
        //left
        if(c - 1 >= 0 && board[l][c-1] != '-') {
            int curInd = board[l][c-1] - 'a';
            if(curNode -> childs[curInd] != NULL) {
                board[l][c-1] = '-';
                dfs(board, l, c-1, lineNum, colNum, curNode -> childs[curInd], res, words);
                board[l][c-1] = 'a' + curInd;
            }
        }
        //right 
        if(c + 1 < colNum && board[l][c+1] != '-') {
            int curInd = board[l][c+1] - 'a';
            if(curNode -> childs[curInd] != NULL) {
                board[l][c+1] = '-';
                dfs(board, l, c+1, lineNum, colNum, curNode -> childs[curInd], res, words);
                board[l][c+1] = 'a' + curInd;
            }
        }
    }
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        vector<string> res;
        int wordNum = words.size();
        int lineNum = board.size(), colNum = board[0].size();
        for(int i = 0; i < wordNum; i++) {
            insert(words[i], i);
        }
        for(int l = 0; l < lineNum; l++) {
            for(int c = 0; c < colNum; c++) {
                int curInd = board[l][c] - 'a';
                if(root -> childs[curInd] != nullptr) {
                    board[l][c] = '-';
                    dfs(board, l, c, lineNum, colNum, root -> childs[curInd], res, words);
                    board[l][c] = 'a' + curInd;
                }
                
            }
        }
        return res;
    }
};


// 115ms   多了一个set的问题？
struct trieNode {
    char c;
    trieNode *childs[26];
    bool isLeaf;

    trieNode(char x) {
        c = x;
        fill_n(childs, 26, nullptr);
        isLeaf = false;
    }
};

class Solution {
private:
   trieNode *root = new trieNode('0');
public:

    void buildTrie(vector<string> words) {
        int len;
        trieNode *curNode = NULL;
        for(auto word : words) {
            len = word.size();
            curNode = root;
            for(int i = 0; i < len; i++) {
                if(curNode -> childs[word[i]-'a'] == NULL) {
                    trieNode *tmp = new trieNode(word[i]);
                    curNode -> childs[word[i]-'a'] = tmp;
                    if(i == len - 1) tmp -> isLeaf = true;
                    curNode = tmp;
                }else {
                    if(i == len - 1) curNode -> childs[word[i] - 'a'] -> isLeaf = true;
                    curNode = curNode -> childs[word[i] - 'a'];
                }
            }
        }
    }

    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        vector<string> res;
        unordered_set<string> set;
        if(words.empty()) return res;

        buildTrie(words);
    
        int lines = board.size(), cols = board[0].size();
        vector<vector<bool>> mark(lines, vector<bool>(cols, false));
        for(int l = 0; l < lines; l++) {
            for(int c = 0; c < cols; c++) {
                backTrack(lines, cols, l, c, set, board, mark, root, "");
            }
        }
        for(auto each : set) res.push_back(each);
        return res;
    }

    void backTrack(int lines, int cols, int line, int col, unordered_set<string> &set, vector<vector<char>> &board, vector<vector<bool>> &mark, trieNode *curNode, string tmpWord) {
        if(line < 0 || col < 0 || line >= lines || col >= cols) return;
        if(mark[line][col] == false) {
            if(curNode -> childs[board[line][col] - 'a']) {
                mark[line][col] = true;
                if(curNode -> childs[board[line][col] - 'a'] -> isLeaf) set.insert(tmpWord+board[line][col]);
                backTrack(lines, cols, line-1, col, set, board, mark, curNode -> childs[board[line][col] - 'a'], tmpWord+board[line][col]);
                backTrack(lines, cols, line+1, col, set, board, mark, curNode -> childs[board[line][col] - 'a'], tmpWord+board[line][col]);
                backTrack(lines, cols, line, col-1, set, board, mark, curNode -> childs[board[line][col] - 'a'], tmpWord+board[line][col]);
                backTrack(lines, cols, line, col+1, set, board, mark, curNode -> childs[board[line][col] - 'a'], tmpWord+board[line][col]);
                mark[line][col] = false;
            }
        }
    }
};

//进一步改进：每当查到一个单词，就用isLeaf排除，从而去掉set操作：104ms
struct trieNode {
    char c;
    trieNode *childs[26];
    bool isLeaf;

    trieNode(char x) {
        c = x;
        fill_n(childs, 26, nullptr);
        isLeaf = false;
    }
};

class Solution {
private:
   trieNode *root = new trieNode('0');
public:

    void buildTrie(vector<string> words) {
        int len;
        trieNode *curNode = NULL;
        for(auto word : words) {
            len = word.size();
            curNode = root;
            for(int i = 0; i < len; i++) {
                if(curNode -> childs[word[i]-'a'] == NULL) {
                    trieNode *tmp = new trieNode(word[i]);
                    curNode -> childs[word[i]-'a'] = tmp;
                    if(i == len - 1) tmp -> isLeaf = true;
                    curNode = tmp;
                }else {
                    if(i == len - 1) curNode -> childs[word[i] - 'a'] -> isLeaf = true;
                    curNode = curNode -> childs[word[i] - 'a'];
                }
            }
        }
    }

    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        vector<string> set;
        if(words.empty()) return set;

        buildTrie(words);

        int lines = board.size(), cols = board[0].size();
        vector<vector<bool>> mark(lines, vector<bool>(cols, false));
        for(int l = 0; l < lines; l++) {
            for(int c = 0; c < cols; c++) {
                backTrack(lines, cols, l, c, set, board, mark, root, "");
            }
        }
        return set;
    }

    void backTrack(int lines, int cols, int line, int col, vector<string> &set, vector<vector<char>> &board, vector<vector<bool>> &mark, trieNode *curNode, string tmpWord) {
        if(line < 0 || col < 0 || line >= lines || col >= cols) return;
        if(mark[line][col] == false) {
            if(curNode -> childs[board[line][col] - 'a']) {
                mark[line][col] = true;
                if(curNode -> childs[board[line][col] - 'a'] -> isLeaf) {
                    set.push_back(tmpWord+board[line][col]);
                    curNode -> childs[board[line][col] - 'a'] -> isLeaf = false;
                }
                backTrack(lines, cols, line-1, col, set, board, mark, curNode -> childs[board[line][col] - 'a'], tmpWord+board[line][col]);
                backTrack(lines, cols, line+1, col, set, board, mark, curNode -> childs[board[line][col] - 'a'], tmpWord+board[line][col]);
                backTrack(lines, cols, line, col-1, set, board, mark, curNode -> childs[board[line][col] - 'a'], tmpWord+board[line][col]);
                backTrack(lines, cols, line, col+1, set, board, mark, curNode -> childs[board[line][col] - 'a'], tmpWord+board[line][col]);
                mark[line][col] = false;
            }
        }
    }
};
