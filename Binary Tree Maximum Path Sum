/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:

    int postOrder(TreeNode *root, int &res) {
        if(!root) return INT_MIN;
        
        int leftMax = postOrder(root -> left, res); // 包含在当前路径上的左子树的最大路径和
        int rightMax = postOrder(root -> right, res);
        
        if(leftMax >=0 && rightMax >= 0) {
            if(root -> val >= 0) {
                res = res > leftMax + rightMax + root -> val ? res : leftMax + rightMax + root -> val;
            }else {
                int tmp = max(leftMax, rightMax);
                tmp = max(tmp, leftMax + rightMax + root -> val);
                res = res > tmp ? res : tmp;
            }
            return max(leftMax, rightMax) + root -> val;
        }else if(leftMax <= 0 && rightMax <= 0) {
            if(root -> val >= 0) {
                res = res > root -> val ? res : root -> val;
            }else {
                int tmp = max(leftMax, rightMax);
                tmp = max(tmp, root -> val);
                res = res > tmp ? res : tmp;
            }
            return root -> val;
        }else if(leftMax >= 0 && rightMax <= 0) {
            if(root -> val >= 0) {
                res = res > leftMax + root -> val ? res : leftMax + root -> val;
            }else {
                res = res > leftMax ? res : leftMax;
            }
            return leftMax + root -> val;
        }else {
            if(root -> val >= 0) {
                res = res > rightMax + root -> val ? res : rightMax + root -> val;
            }else {
                res = res > rightMax ? res : rightMax;
            }
            return rightMax + root -> val;
        }
        
    }

    int maxPathSum(TreeNode *root) {
        int res = INT_MIN;
        postOrder(root, res);
        return res;
    }
};

//32ms
class Solution {
public:
    int maxPathSum(TreeNode* root) {
        int res = INT_MIN;
        recFun(root, res);
        return res;
    }
    
    int recFun(TreeNode *root, int &res) {
        if(root == NULL) return 0;
        int left = recFun(root -> left, res);
        int right = recFun(root -> right, res);
        int tmpSum = 0;
        if(left > 0) tmpSum += left;
        if(right > 0) tmpSum += right;
        tmpSum += root -> val;
        if(res < tmpSum) res = tmpSum;
        int bigger = left > right ? left : right;
        if(bigger > 0) root -> val += bigger;
        return root -> val;
    }
    
};