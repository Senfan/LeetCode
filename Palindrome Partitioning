//关于回文字符串：要找那个最长长度，则可以从中间轴开始查找，但是要是判断的话，因为知道边界，所以可以直接判断的！！！但是可以用中轴法只枚举是回文的情况，从而不用枚举所有的情况而进行判断，这种思想在这道题的变种II中很明显的用到了，如果用暴力枚举判断所有的子串则有TLE，而只枚举是回文的子串，从而更新相应记录，可以很快完成！！！看待问题一定要从多个角度，多个视角去，特别是逆向思维的应用：可以从要更新的记录去要条件（必须是回文），但是也可以只更新是回文的记录啊，逆向思维是一种最常见的多视角思考问题的路子！！！
//回溯或者递归路径记录模型的熟悉，要仔细揣度怎样记录每一个记录值！
class Solution {
    vector<vector<string> > res;
    vector<string> oneRes;
public:
    void findPalindrome(string s) {
        for(int i = 1; i <= s.size(); i++) {
            int l = 0, r = i-1;
            while(l <= r) {
                if(s[l] != s[r]) break;
                l++, r--;
            }
            if(l > r) {
                oneRes.push_back(s.substr(0, i));
                if(i == s.size()) res.push_back(oneRes);
                findPalindrome(s.substr(i));
                oneRes.pop_back();
            }
        }
    }
    vector<vector<string>> partition(string s) {
        findPalindrome(s);
        return res;
    }
};