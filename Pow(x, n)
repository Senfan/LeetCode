// O(n)
class Solution {
public:
    double myPow(double x, int n) {
        if(n == 0) return 1;
        int tmp = abs(n);
        double res = 1;
        while(tmp--) {
            res *= x;
            if(res == 0 || res == 1) return res;
            if(res == -1) return abs(n) % 2 ? -1 : 1;
        }
        if(n < 0) return 1/res;
        return res;
    }
};

//很明显，可以用分治法，存在对称的子问题，相同的子问题就不要再重新计算量了！！降低时间复杂度的啊，递归时间复杂度分析可以借助解答树进行
//数值计算一般都可以考虑二分法！！！计算分治算法！！！从小的开始计算就好！！
class Solution {
public:
    double myPow(double x, int n) {
        if (n == 0) {
            return 1;
        }
        if (n < 0) {
            x = 1 / x;
            n = -n;
        }
        double res = myPow(x, n / 2);
        return n & 1 ? x * res * res : res * res;
    }
};

class Solution {
public:
    double myPow(double x, int n) {
        if(n<0){
            n=-n;
            x=1/x;
        }
        if(n==1){
            return x;
        }
        if(n==0){
            return 1;
        }
        double temp=1;
        if(n%2==1){
            temp=x;
        }
        return temp * myPow(x*x, n/2);
    }
};