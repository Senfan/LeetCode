//288ms too slowly
class Solution {
public:

    bool judge(vector<vector<char> > &board, string word, int r, int c, int rowNum, int colNum) {
        stack<char> dirStk;
        stack<int> rowStk;
        stack<int> colStk;
        set< pair<int, int> > cellSet;
        pair<int, int> tmpPair;
        int wordLen = word.size();
        if(wordLen == 1) return true;
        int dirRem = -1;
        cellSet.insert(make_pair(r,c));
        int remFr = r;
        int remFc = c;
        if(r > 0 && board[r-1][c] == word[1]) { //up
                if (wordLen == 2) return true;
                dirStk.push('u');
                r--;
                rowStk.push(r);
                colStk.push(c);
                cellSet.insert(make_pair(r, c));
        }else if(r < rowNum - 1 && board[r+1][c] == word[1]) {
                if (wordLen == 2) return true;
                dirStk.push('d');
                r++;
                rowStk.push(r);
                colStk.push(c);
                cellSet.insert(make_pair(r, c));
        }else if(c > 0 && board[r][c-1] == word[1]) {
                if (wordLen == 2) return true;
                dirStk.push('l');
                c--;
                rowStk.push(r);
                colStk.push(c);
                cellSet.insert(make_pair(r, c));
        }else if(c < colNum - 1 && board[r][c+1] == word[1]) {
                if (wordLen == 2) return true;
                dirStk.push('r');
                c++;
                rowStk.push(r);
                colStk.push(c);
                cellSet.insert(make_pair(r, c));
        }
        if(dirStk.empty()) return false;
        bool isBack = false;
        for(int i = 2; i < wordLen; ) {
            while(!dirStk.empty() || i == 1){
                if( ((isBack && dirRem < 0 ) || (!isBack)) && r > 0 && cellSet.find(make_pair(r-1, c)) == cellSet.end() && board[r-1][c] == word[i]) { //up

                    if(i == wordLen - 1) return true;
                    else{
                        dirStk.push('u');
                        r--;
                        rowStk.push(r);
                        colStk.push(c);
                        cellSet.insert(make_pair(r, c));
                        i++;
                        isBack = false;
                        break;
                    }
                }else if(((isBack && dirRem < 1 ) || (!isBack)) && r < (rowNum - 1) && cellSet.find(make_pair(r+1, c)) == cellSet.end() && board[r+1][c] == word[i]) {
                    if(i == wordLen - 1) return true;
                    else {
                        dirStk.push('d');
                        r++;
                        rowStk.push(r);
                        colStk.push(c);
                        cellSet.insert(make_pair(r, c));
                        i++;
                        isBack = false;
                        break;
                    }
                }else if(((isBack && dirRem < 2 ) || (!isBack)) && c > 0 && cellSet.find(make_pair(r, c-1)) == cellSet.end() && board[r][c-1] == word[i]) {

                    if(i == wordLen - 1) return true;
                    else {
                        dirStk.push('l');
                        c--;
                        rowStk.push(r);
                        colStk.push(c);
                        cellSet.insert(make_pair(r, c));
                        i++;
                        isBack = false;
                        break;
                    }
                }else if(((isBack && dirRem < 3 ) || (!isBack)) && c < (colNum - 1) && cellSet.find(make_pair(r, c+1)) == cellSet.end() && board[r][c+1] == word[i]) {

                    if(i == wordLen - 1) return true;
                    else {
                        dirStk.push('r');
                        c++;
                        rowStk.push(r);
                        colStk.push(c);
                        cellSet.insert(make_pair(r, c));
                        i++;
                        isBack = false;
                        break;
                    }
                }else {
                    isBack = true;
                    if(i == 1 && dirStk.empty()) return false;
                    char direct = dirStk.top();
                    dirStk.pop();
                    if(direct == 'r' && dirStk.empty()) return false;
                    int rTmp = rowStk.top();
                    int cTmp = colStk.top();
                    rowStk.pop();
                    colStk.pop();
                    cellSet.erase(make_pair(rTmp, cTmp));
                    if(dirStk.empty()) {
                        r = remFr;
                        c = remFc;
                    }else {
                        r = rowStk.top();
                        c = colStk.top();
                    }
                    if(direct == 'l'){
                        dirRem = 2;
                    }else if(direct == 'd'){
                        dirRem = 1;
                    }else if(direct == 'u'){
                        dirRem = 0;
                    }else {
                        dirRem = 3;
                    }
                    i--;
                }
            }
        }
    }
    bool exist(vector<vector<char> > &board, string word) {
        if(word == "") return true;

        int rowNum = board.size();
        int colNum = board[0].size();

        bool isFund = false;
        for(int r = 0; r < rowNum; r++) {
            for(int c = 0; c < colNum; c++) {
                if(board[r][c] == word[0]) {
                    isFund = judge(board, word, r, c, rowNum, colNum);
                    if(isFund) return true;
                }
            }
        }
        return isFund;
    }
};


// 回溯法：WA没找到bug
class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
        if(word == "") return true;
        int lines = board.size(), cols = board[0].size();
        vector<vector<int>> visited(lines, vector<int>(cols, 0));
        
        for(int i = 0; i < lines; i++) {
            for(int j = 0; j < cols; j++) {
                if(board[i][j] == word[0]) {
                    visited[i][j] = 1;
                    if(backTrack(board, word.substr(1), lines, cols, i, j, visited)) return true;
                    visited[i][j] = 0;
                }
            }
        }
        return false;
    }
    
    bool backTrack(vector<vector<char>> &board, string word, int lines, int cols, int curLine, int curCol, vector<vector<int>> &visited) {
        if(word == "") return true;
        
        if(curLine - 1 >= 0 && !visited[curLine-1][curCol] && board[curLine-1][curCol] == word[0]) {
            visited[curLine-1][curCol] = 1;
            if(backTrack(board, word.substr(1), lines, cols, curLine-1, curCol, visited)) return true;
            visited[curLine-1][curCol] = 0;
        }else if(curLine+1 < lines && !visited[curLine+1][curCol] && board[curLine+1][curCol] == word[0]) {
            visited[curLine+1][curCol] = 1;
            if(backTrack(board, word.substr(1), lines, cols, curLine+1, curCol, visited)) return true;
            visited[curLine+1][curCol] = 0;
        }else if(curCol-1 >= 0 && !visited[curLine][curCol-1] && board[curLine][curCol-1] == word[0]) {
            visited[curLine][curCol-1] = 1;
            if(backTrack(board, word.substr(1), lines, cols, curLine, curCol-1, visited)) return true;
            visited[curLine][curCol-1] = 0;
        }else if(curCol+1 < cols && !visited[curLine][curCol+1] && board[curLine][curCol+1] == word[0]) {
            visited[curLine][curCol+1] = 1;
            if(backTrack(board, word.substr(1), lines, cols, curLine, curCol+1, visited)) return true;
            visited[curLine][curCol+1] = 0;
        }
        return false;
    }
};

//R 
class Solution {
    public:
         bool exist(vector<vector<char> > &board, string word) {
             m=board.size();
             n=board[0].size();
            for(int x=0;x<m;x++)
                for(int y=0;y<n;y++)
                {
                    if(isFound(board,word.c_str(),x,y))
                        return true;
                }
            return false;
        }
    private:
        int m;
        int n;
        bool isFound(vector<vector<char> > &board, const char* w, int x, int y)
        {
            if(x<0||y<0||x>=m||y>=n||board[x][y]=='\0'||*w!=board[x][y])
                return false;
            if(*(w+1)=='\0')
                return true;
            char t=board[x][y];
            board[x][y]='\0';
            if(isFound(board,w+1,x-1,y)||isFound(board,w+1,x+1,y)||isFound(board,w+1,x,y-1)||isFound(board,w+1,x,y+1))
                return true; 
            board[x][y]=t;
            return false;
        }
    };