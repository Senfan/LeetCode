//25ms
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:

    TreeNode *buildBst(vector<int> &num, int left, int right) {
        TreeNode *newNode = NULL;
        if(left <= right) {
            int mid = (left + right) >> 1;
            newNode = new TreeNode(num[mid]);
            newNode -> left = buildBst(num, left, mid - 1);
            newNode -> right = buildBst(num, mid + 1, right);
        }
        return newNode;
    }

    TreeNode *sortedArrayToBST(vector<int> &num) {
        TreeNode *root = NULL;
        if(num.empty()) return root;

        root = buildBst(num, 0, num.size() - 1);

        return root;
    }
};

// S 20ms
class Solution {
public:
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        if(nums.empty()) return NULL;
        TreeNode *root = NULL;
        buildBST(nums, 0, nums.size() - 1, root);
        return root;
    }
    void buildBST(vector<int> &vals, int left, int right, TreeNode *&root) {
        if(left > right) return;
        int mid = (left + right) >> 1;
        root = new TreeNode(vals[mid]);
        buildBST(vals, left, mid - 1, root->left);
        buildBST(vals, mid + 1, right, root->right);
    }
};