//55ms ：去除前面小的，只留下大的，则可以确定剩下的是第几个最大数！！！
class Solution {
public:
    double findKth(vector<int> &nums1, int len1, vector<int> &nums2, int len2, int k) {
        if(len1 > len2) return findKth(nums2, len2, nums1, len1, k);
        if(len1 == 0) return nums2[k-1];
        if(k == 1) return nums1[0] > nums2[0] ? nums2[0] : nums1[0];
        
        int pa = min(len1, k >> 1), pb = k - pa;
        if(nums1[pa-1] == nums2[pb-1]) return nums1[pa-1];
        else if(nums1[pa-1] > nums2[pb-1]) {
        	vector<int> tmp2(nums2.begin()+pb, nums2.end());
            return findKth(nums1, len1, tmp2, len2-pb, k - pb);
        }else {
        	vector<int> tmp1(nums1.begin()+pa, nums1.end());
            return findKth(tmp1, len1-pa, nums2, len2, k - pa);
        }
    }
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int len1 = nums1.size(), len2 = nums2.size(), total = len1 + len2;
        if(total & 1) {
            return findKth(nums1, len1, nums2, len2, (total >> 1) + 1);
        }else {
            return (findKth(nums1, len1, nums2, len2, total >> 1) + findKth(nums1, len1, nums2, len2, (total >> 1) + 1)) / 2;
        }
        
    }
};
//40ms O(log(min(m, n)))!!!模型建立的很直观，重在实现的逻辑整理上
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int len1 = nums1.size(), len2 = nums2.size();
        if(len1 > len2) return findMedianSortedArrays(nums2, nums1);
        
        int left = 0, right = len1, ind2, ind1, total = len2 + len1, cnt = (total + 1) >> 1, num1, num2;
        while(left <= right) {
            ind1 = (left + right) >> 1;
            ind2 = cnt - ind1;
            if(ind1 > 0 && ind2 < len2 && nums2[ind2] < nums1[ind1-1]) right = ind1 - 1;
            else if(ind2 > 0 && ind1 < len1 && nums2[ind2-1] > nums1[ind1]) left = ind1 + 1;
            else {
                if(ind1 == 0) num1 = nums2[ind2-1];
                else if(ind2 == 0) num1 = nums1[ind1-1];
                else num1 = max(nums1[ind1-1], nums2[ind2-1]);
                break;
            }
        }
        
        if(total & 1) return num1;
        if(ind1 == len1) num2 = nums2[ind2];
        else if(ind2 == len2) num2 = nums1[ind1];
        else num2 = min(nums1[ind1], nums2[ind2]);
        return (num1 + num2) / 2.0;
    }
};