class Solution {
public:
    double findKth(vector<int> &nums1, int len1, vector<int> &nums2, int len2, int k) {
        if(len1 > len2) return findKth(nums2, len2, nums1, len1, k);
        if(len1 == 0) return nums2[k-1];
        if(k == 1) return nums1[0] > nums2[0] ? nums2[0] : nums1[0];
        
        int pa = min(len1, k >> 1), pb = k - pa;
        if(nums1[pa-1] == nums2[pb-1]) return nums1[pa-1];
        else if(nums1[pa-1] > nums2[pb-1]) {
        	vector<int> tmp2(nums2.begin()+pb, nums2.end());
            return findKth(nums1, len1, tmp2, len2-pb, k - pb);
        }else {
        	vector<int> tmp1(nums1.begin()+pa, nums1.end());
            return findKth(tmp1, len1-pa, nums2, len2, k - pa);
        }
    }
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int len1 = nums1.size(), len2 = nums2.size(), total = len1 + len2;
        if(total & 1) {
            return findKth(nums1, len1, nums2, len2, (total >> 1) + 1);
        }else {
            return (findKth(nums1, len1, nums2, len2, total >> 1) + findKth(nums1, len1, nums2, len2, (total >> 1) + 1)) / 2;
        }
        
    }
};