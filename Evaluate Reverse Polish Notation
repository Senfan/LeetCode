class Solution {
public:
    int evalRPN(vector<string>& tokens) {
        if(tokens.empty()) return 0;\
        int len = tokens.size();
        stringstream strm;
        int opa, opb;
        stack<int> stk;
        for(int i = 0; i < len; i++) {
            switch(tokens[i][0]) {
                case '+':
                	if(tokens[i].size() == 1) {
                		opa = stk.top();
                    	stk.pop();
                    	opb = stk.top();
                    	stk.pop();
                    	stk.push(opa + opb);
                    	break;
                	}else {
                		strm.clear();
                    	strm.str(tokens[i]);
                    	strm >> opa;
                    	stk.push(opa);
                    	break;
                	}
                case '-':
                	if(tokens[i].size() == 1) {
                		opa = stk.top();
                    	stk.pop();
                    	opb = stk.top();
                    	stk.pop();
                    	stk.push(opb - opa);
                    	break;
                	}else {
                		strm.clear();
                    	strm.str(tokens[i]);
                    	strm >> opa;
                    	stk.push(opa);
                    	break;
                	}
                case '*':
                    opa = stk.top();
                    stk.pop();
                    opb = stk.top();
                    stk.pop();
                    stk.push(opa * opb);
                    break;
                case '/':
                    opa = stk.top();
                    stk.pop();
                    opb = stk.top();
                    stk.pop();
                    stk.push(opb / opa);
                    break;
                default:
                    strm.clear();
                    strm.str(tokens[i]);
                    strm >> opa;
                    stk.push(opa);
                    break;
            }
        }
        return stk.top();
    }
};

//16ms
class Solution {
public:
    int evalRPN(vector<string>& tokens) {
        if(tokens.empty()) return 0;
        
        stack<int> stk;
        int size = tokens.size();
        stringstream ss;
        int num, num1, num2;
        
        for(int i = 0; i < size; i++) {
            if(tokens[i] == "+") {
                num1 = stk.top();
                stk.pop();
                num2 = stk.top();
                stk.pop();
                stk.push(num1 + num2);
            }else if(tokens[i] == "-") {
                num2 = stk.top();
                stk.pop();
                num1 = stk.top();
                stk.pop();
                stk.push(num1 - num2);
            }else if(tokens[i] == "*") {
                num2 = stk.top();
                stk.pop();
                num1 = stk.top();
                stk.pop();
                stk.push(num1 * num2);
            }else if(tokens[i] == "/") {
                num2 = stk.top();
                stk.pop();
                num1 = stk.top();
                stk.pop();
                stk.push(num1 / num2);
            }else {
                ss.clear();
                ss << tokens[i];
                ss >> num;
                stk.push(num);
            }
        }
        return stk.top();
    }
};