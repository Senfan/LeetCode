class Solution {
public:
    int jump(int A[], int n) {
        int curInd = 0;
        int res = 0;

        while(curInd < n-1) {
            if(A[curInd] > n - curInd - 2) return ++res;
            int max = A[curInd];
            int mark = curInd;
            for(int i = 1; i <= A[curInd]; i++) {
                if(curInd + i + A[curInd+i] > max) {
                    max = curInd + i + A[curInd+i];
                    mark = curInd + i;
                }
            }
            res++;
            curInd = mark;
        }
        return res;
    }
};


//S : TLE
class Solution {
public:
    int jump(vector<int>& nums) {
        if(nums.empty()) return 0;
        int numCnt = nums.size();
        vector<int> res(numCnt, INT_MAX);
        res[0] = 0;

        for(int i = 0; i < numCnt; i++) {
            for(int j = 1; (i+j) < numCnt && j <= nums[i]; j++)
                res[i+j] = min(res[i+j], res[i]+1);
        }
        return res[numCnt-1];
    }
};