class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int len = nums.size(), l, r, maxL = INT_MIN, tarR;
        bool found;
        for(r = len - 1; r >= 0; r--) {
            found = false;
            for(l = r - 1; l >= 0 && !found; l--) {
                if(nums[l] < nums[r]) {
                    if(l > maxL) {
                        maxL = l;
                        tarR = r;
                    }else if(l == maxL) {
                        if(nums[r] < nums[tarR]) {
                            tarR = r;
                        }
                    }
                    found = true;
                }
            }
        }
        
        if(maxL > INT_MIN) {
            swap(nums[tarR], nums[maxL]);
            sort(nums.begin() + maxL + 1, nums.end());
        }else {
            sort(nums.begin(), nums.end());
        }
    }
};

// R 抽象出思想 ： 只要有一个是升序就可以生成下一个排列！！！！
class Solution {
public:
    void nextPermutation(vector<int> &num) {
        if (num.size() < 2) return;
        int i, k;
        for (i = num.size() - 2; i >= 0; --i) if (num[i] < num[i+1]) break;
        for (k = num.size() - 1; k > i; --k) if (num[i] < num[k]) break;
        if (i >= 0) swap(num[i], num[k]);
        reverse(num.begin() + i + 1, num.end());
    }
};
