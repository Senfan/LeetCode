class Solution {
public:
    int searchInsert(int A[], int n, int target) {
        if(n == 0) return 0;
        int left = 0, right = n - 1, mid;
        
        while(left <= right) {
            mid = (left + right) >> 1;
            if(A[mid] == target) return mid;
            
            if(A[mid] > target) {
                right = mid - 1;
            }else {
                left = mid + 1;
            }
        }
        
        return left;
    }
};

// S : 8ms
class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        if(nums.empty()) return 0;
        
        int r = nums.size() - 1, l = 0, mid;
        
        while(l <= r) {
            mid = l + ((r - l) >> 1);
            if(nums[mid] > target) r = mid - 1;
            else if(nums[mid] < target) l = mid + 1;
            else return mid;
        }
        return l;
    }
};

