//18ms
class Solution {
public:
    
    bool canJump(int A[], int n) {
        if(n == 1) return true;
        
        for(int i = 0; i < n; i++) {
            if(A[i]) continue;
            
            bool isCan = false;
            for(int j = i - 1; !isCan && j >= 0; j--) {
                if(A[j] > (i - j)) {
                    isCan = true;
                }
                if(i == n-1 && A[j] >= (i - j)) isCan = true;
            }
            if(!isCan) return false;
        }
        return true;
    }
};

// S :递归 TLE
class Solution {
public:
    bool canJump(vector<int>& nums) {
        int end = nums.size() - 1;
        return tryJump(nums, 0, end);
    }
    bool tryJump(vector<int> &nums, int curInd, int end) {
        if(curInd >= end) return true;
        for(int i = 1; i <= nums[curInd]; i++) {
            if(tryJump(nums, curInd+i, end)) return true;
        }
        return false;
    }
};

//R :16ms
class Solution {
public:
    bool canJump(vector<int>& nums) {
        int numCnt = nums.size();
        int curMax = 0, i = 0;
        
        for(i = 0; i < numCnt && i <= curMax; i++) {
            curMax = max(curMax, nums[i] + i);
        }
        return i == numCnt;
    }
};